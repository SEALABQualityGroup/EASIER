/* Generated By:JavaCC: Do not edit this line. RewParserConstants.java */
package it.univaq.disim.sealab.ttep.rew;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface RewParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LPAREN = 7;
  /** RegularExpression Id. */
  int RPAREN = 8;
  /** RegularExpression Id. */
  int LBRACE = 9;
  /** RegularExpression Id. */
  int RBRACE = 10;
  /** RegularExpression Id. */
  int LBRACKET = 11;
  /** RegularExpression Id. */
  int RBRACKET = 12;
  /** RegularExpression Id. */
  int SEMICOLON = 13;
  /** RegularExpression Id. */
  int COMMA = 14;
  /** RegularExpression Id. */
  int DOT = 15;
  /** RegularExpression Id. */
  int COLON = 16;
  /** RegularExpression Id. */
  int DOUBLE_COLON = 17;
  /** RegularExpression Id. */
  int DOTDOT = 18;
  /** RegularExpression Id. */
  int UNDERSCORE = 19;
  /** RegularExpression Id. */
  int EQUAL = 20;
  /** RegularExpression Id. */
  int LESS = 21;
  /** RegularExpression Id. */
  int GREATER = 22;
  /** RegularExpression Id. */
  int QUESTION = 23;
  /** RegularExpression Id. */
  int EXCLAMATION = 24;
  /** RegularExpression Id. */
  int MULTIPLICATION = 25;
  /** RegularExpression Id. */
  int DIVISION = 26;
  /** RegularExpression Id. */
  int ADDITION = 27;
  /** RegularExpression Id. */
  int SUBTRACTION = 28;
  /** RegularExpression Id. */
  int T_FIRST = 29;
  /** RegularExpression Id. */
  int T_READ = 30;
  /** RegularExpression Id. */
  int T_GET = 31;
  /** RegularExpression Id. */
  int AND = 32;
  /** RegularExpression Id. */
  int OR = 33;
  /** RegularExpression Id. */
  int T_TRUE = 34;
  /** RegularExpression Id. */
  int T_FALSE = 35;
  /** RegularExpression Id. */
  int LE = 36;
  /** RegularExpression Id. */
  int GE = 37;
  /** RegularExpression Id. */
  int NE = 38;
  /** RegularExpression Id. */
  int T_LENGTH = 39;
  /** RegularExpression Id. */
  int T_LIST_CONS = 40;
  /** RegularExpression Id. */
  int T_TAIL = 41;
  /** RegularExpression Id. */
  int T_CONCAT = 42;
  /** RegularExpression Id. */
  int T_INSERT = 43;
  /** RegularExpression Id. */
  int T_REMOVE = 44;
  /** RegularExpression Id. */
  int T_ARRAY_CONS = 45;
  /** RegularExpression Id. */
  int T_WRITE = 46;
  /** RegularExpression Id. */
  int T_RECORD_CONS = 47;
  /** RegularExpression Id. */
  int T_PUT = 48;
  /** RegularExpression Id. */
  int T_MEASURE = 49;
  /** RegularExpression Id. */
  int T_IS = 50;
  /** RegularExpression Id. */
  int T_FOR_ALL = 51;
  /** RegularExpression Id. */
  int T_IN = 52;
  /** RegularExpression Id. */
  int T_ENABLED = 53;
  /** RegularExpression Id. */
  int T_STATE_REWARD = 54;
  /** RegularExpression Id. */
  int T_TRANS_REWARD = 55;
  /** RegularExpression Id. */
  int IMPL = 56;
  /** RegularExpression Id. */
  int T_ID = 57;
  /** RegularExpression Id. */
  int LETTER = 58;
  /** RegularExpression Id. */
  int DIGIT = 59;
  /** RegularExpression Id. */
  int T_NUMBER = 60;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 61;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 62;
  /** RegularExpression Id. */
  int HEX_LITERAL = 63;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 64;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 65;
  /** RegularExpression Id. */
  int EXPONENT = 66;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"\\n\"",
    "<token of kind 6>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\":\"",
    "\"::\"",
    "\"..\"",
    "\"_\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"?\"",
    "\"!\"",
    "\"*\"",
    "\"/\"",
    "\"+\"",
    "\"-\"",
    "\"first\"",
    "\"read\"",
    "\"get\"",
    "\"&&\"",
    "\"||\"",
    "\"true\"",
    "\"false\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"length\"",
    "\"list_cons\"",
    "\"tail\"",
    "\"concat\"",
    "\"insert\"",
    "\"remove\"",
    "\"array_cons\"",
    "\"write\"",
    "\"record_cons\"",
    "\"put\"",
    "\"MEASURE\"",
    "\"IS\"",
    "\"FOR_ALL\"",
    "\"IN\"",
    "\"ENABLED\"",
    "\"STATE_REWARD\"",
    "\"TRANS_REWARD\"",
    "\"->\"",
    "<T_ID>",
    "<LETTER>",
    "<DIGIT>",
    "<T_NUMBER>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
  };

}
