/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  static = false;
  JAVA_UNICODE_ESCAPE = true;	/* default: false*/
  // DEBUG_PARSER = true;
}PARSER_BEGIN(RewParser)package it.univaq.disim.sealab.ttep.rew;

public class RewParser{
  public static void main(String args []) throws ParseException  {    RewParser parser;
		if (args.length == 1) {
      System.out.println("Rew Parser Version 1.0:  Reading from file " + args[0] + " . . .");
      try {
        parser = new RewParser(new java.io.FileInputStream(args[0]));
      } 
      catch (java.io.FileNotFoundException e) {
        System.out.println("Rew Parser Version 1.0:  File " + args[0] + " not found.");
        return;
      }
    } 
    else {
      System.out.println("Rew Parser Version 1.0:  Usage is one of:");
      System.out.println("         java RewParser < inputfile");
      System.out.println("OR");
      System.out.println("         java RewParser inputfile");
      return;
    }
    try {
      parser.RewSpec();
      System.out.println("Rew Parser Version 1.0:  Ruby program parsed successfully.");
    } 
    catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("Rew Parser Version 1.0:  Encountered errors during parse.");
    }
      }}PARSER_END(RewParser)SKIP :{
  " "
| "\t"	/*Tab orizzontale*/
| "\r"	/*Carriage Return*/
| "\f"  /*Formfeed*/
| "\n"  /*Newline*/
| <("\n")* "%" (~["\n","\r"])* ("\n"|"\r"|"\r\n")("\n")* > /*Comments*/
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < COLON: ":" >
| < DOUBLE_COLON: "::" >
| < DOTDOT : ".." >
| <UNDERSCORE : "_"> /* symbol */
| < EQUAL : "=" >
| < LESS : "<" >
| < GREATER : ">" >
| <QUESTION						: "?">/* symbol */
| <EXCLAMATION					: "!">/* symbol */
| <MULTIPLICATION				: "*">/* symbol */
| <DIVISION 					: "/">/* symbol */
| <ADDITION 					: "+">/* symbol */
| <SUBTRACTION  				: "-">/* symbol */
}

/****************************************************************/
/* 6. Definition of tokens.					*/
/****************************************************************/
TOKEN :
{
  <T_FIRST				        : "first">/* keyword */
| <T_READ				          : "read">/* keyword */
| <T_GET				          : "get">/* keyword */
| <AND				            : "&&">/* symbol */
| <OR				              : "||">/* symbol */
| <T_TRUE				          : "true">/* keyword */
| <T_FALSE				        : "false">/* keyword */
| <LE				              : "<=">/* symbol */
| <GE				              : ">=">/* symbol */
| <NE				              : "!=">/* symbol */
| <T_LENGTH			          : "length">/* keyword */
| <T_LIST_CONS			      : "list_cons">/* keyword */
| <T_TAIL				          : "tail">/* keyword */
| <T_CONCAT			          : "concat">/* keyword */
| <T_INSERT			          : "insert">/* keyword */
| <T_REMOVE			          : "remove">/* keyword */
| <T_ARRAY_CONS			      : "array_cons">/* keyword */
| <T_WRITE				        : "write">/* keyword */
| <T_RECORD_CONS			    : "record_cons">/* keyword */
| <T_PUT				          : "put">/* keyword */
| <T_MEASURE 					: "MEASURE" >/* keyword */
| <T_IS							: "IS">/* keyword */
| <T_FOR_ALL			        : "FOR_ALL">/* keyword */
| <T_IN							: "IN" >/* keyword */
| <T_ENABLED					: "ENABLED" >/* keyword */
| <T_STATE_REWARD				: "STATE_REWARD" >/* keyword */
| <T_TRANS_REWARD				: "TRANS_REWARD" >/* keyword */
| <IMPL				            : "->">/* symbol */
}

TOKEN : /* IDENTIFIERS */
{
  < T_ID: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0041"-"\u005a", /* "A"-"Z" */
       "\u005f", /* "_" */
       "\u0061"-"\u007a", /* "a"-"z" */
       "\u00c0"-"\u00d6", /* "e'"-"e'" */
       "\u00d8"-"\u00f6", /* "e'"-"e'" */
       "\u00f8"-"\u00ff", /* "e'"-"e'" */
       "\u0100"-"\u1fff", 
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN : /* LITERALS */
{
	<T_NUMBER:
				<INTEGER_LITERAL>
			| <FLOATING_POINT_LITERAL>
	>
|
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
}

/*
 * Expression syntax follows.
 */
specificheAEmilia.IdentExpr IdentExpr() :
	{
	specificheAEmilia.IdentExpr ris;
	Token t;  
	}
	{
	t = <T_ID>
		{
		ris = new specificheAEmilia.IdentExpr(t.image);
		return ris;
		}
	}

specificheAEmilia.Expression Erecord() :
	{
	specificheAEmilia.Expression ris;
	java.util.List<specificheAEmilia.Expression> list = new java.util.ArrayList<specificheAEmilia.Expression>();
	specificheAEmilia.Expression expression;
	specificheAEmilia.IdentExpr identExpr;
	Token t1;
	Token t2;
	}
	{
	<T_RECORD_CONS> <LPAREN> expression = E() {list.add(expression);} (<COMMA> expression = E() {list.add(expression);})* <RPAREN>
		{
		specificheAEmilia.Expression[] expressions = new specificheAEmilia.Expression[list.size()];
		for (int i = 0; i < list.size(); i++)
			{
			specificheAEmilia.Expression exp1 = list.get(i);
			expressions[i] = exp1;  
			}
		specificheAEmilia.RecordCons recordCons = new specificheAEmilia.RecordCons(expressions);
		ris = recordCons;
		return ris;
		}
	|
	<T_PUT> <LPAREN> t1 = <T_ID> <COMMA> expression = E() <COMMA> identExpr = IdentExpr() <RPAREN>
		{
		specificheAEmilia.Put put = new specificheAEmilia.Put(t1.image,expression,identExpr);
		ris = put;
		return ris;
		}
	}

specificheAEmilia.Expression Earr() :
	{
	java.util.List<specificheAEmilia.Expression> list = new java.util.ArrayList<specificheAEmilia.Expression>();
	specificheAEmilia.Expression expression;
	specificheAEmilia.Expression expression2;
	specificheAEmilia.IdentExpr identExpr;
	}
	{
	<T_ARRAY_CONS> <LPAREN> expression = E() {list.add(expression);} (<COMMA> expression = E() {list.add(expression);})* <RPAREN>
		{
		specificheAEmilia.Expression[] expressions = new specificheAEmilia.Expression[list.size()];
		for (int i = 0; i < list.size(); i++)
			{
			specificheAEmilia.Expression exp1 = list.get(i);
			expressions[i] = exp1;  
			}
		specificheAEmilia.ArrayCons arrayCons = new specificheAEmilia.ArrayCons(expressions);
		return arrayCons;
		}
	|
	<T_WRITE> <LPAREN> expression = E() <COMMA> expression2 = E() <COMMA> identExpr = IdentExpr() <RPAREN>
		{
		specificheAEmilia.Write write = new specificheAEmilia.Write(expression,expression2,identExpr);
		return write;
		}
	}

specificheAEmilia.Expression El() :
	{
	specificheAEmilia.Expression expression;
	java.util.List<specificheAEmilia.Expression> list = new java.util.ArrayList<specificheAEmilia.Expression>();
	Token t1;
	specificheAEmilia.IdentExpr identExpr;
	Token t2;
	specificheAEmilia.IdentExpr identExpr2;
	}
	{
	<T_LIST_CONS> <LPAREN> (expression = E() {list.add(expression);} ( <COMMA> expression = E() {list.add(expression);})*)? <RPAREN>
		{
		specificheAEmilia.Expression[] expressions = new specificheAEmilia.Expression[list.size()];
		for (int i = 0; i < list.size(); i++)
			{
			specificheAEmilia.Expression exp1 = list.get(i);
			expressions[i] = exp1;
			}
		specificheAEmilia.ListCons listCons = new specificheAEmilia.ListCons(expressions);
		return listCons;
		}
	|
	<T_TAIL> <LPAREN> identExpr = IdentExpr() <RPAREN>
		{
		specificheAEmilia.Tail tail = new specificheAEmilia.Tail(identExpr);
		return tail;
		}
	|
	<T_CONCAT> <LPAREN> identExpr = IdentExpr() <COMMA> identExpr2 = IdentExpr() <RPAREN>
		{
		specificheAEmilia.Concat concat = new specificheAEmilia.Concat(identExpr,identExpr2);
		return concat;
		}
	|
	<T_INSERT> <LPAREN> expression = E() <COMMA> identExpr = IdentExpr() <RPAREN>
		{
		specificheAEmilia.Insert insert = new specificheAEmilia.Insert(expression,identExpr);
		return insert;
		}
	|
	<T_REMOVE> <LPAREN> expression = E() <COMMA> identExpr = IdentExpr() <RPAREN>
		{
		specificheAEmilia.Remove remove = new specificheAEmilia.Remove(expression,identExpr);
		return remove;
		}
	}

specificheAEmilia.Expression Eatf() :
	{
	specificheAEmilia.Expression ris;
	Token t1;
	specificheAEmilia.IdentExpr identExpr;
	}
	{
	LOOKAHEAD(<LPAREN> E() <RPAREN>)
	<LPAREN> ris = E() <RPAREN>
		{
		return ris;
		}
	|
	ris = IdentExpr()
		{
		return ris;
		}
	|
	t1 = <T_NUMBER>
		{
		try {
		  	java.lang.Long number = java.lang.Long.parseLong(t1.image);
		  	specificheAEmilia.Integer integer = new specificheAEmilia.Integer(number.intValue());
		  	return integer;	
		 	}
		catch (NumberFormatException e1)
			{
			try {
			  	java.lang.Double double1 = java.lang.Double.parseDouble(t1.image);
			  	specificheAEmilia.Real real = new specificheAEmilia.Real(double1);
			  	return real;
			  	}
			catch (NumberFormatException e2)
				{
				return null;
				}
			}
		return null;
		}
	|
	LOOKAHEAD(<T_LENGTH> <LPAREN> IdentExpr() <RPAREN>)
	<T_LENGTH> <LPAREN> identExpr = IdentExpr() <RPAREN>
		{
		specificheAEmilia.Length length = new specificheAEmilia.Length(identExpr);
		return length;
		}
	}

specificheAEmilia.Expression Eat() :
	{
	specificheAEmilia.Expression e1;
	specificheAEmilia.Expression e2;
	java.util.List<specificheAEmilia.Expression> list = new java.util.ArrayList<specificheAEmilia.Expression>();
	}
	{
	e1 = Eatf()
		{
		list.add(e1);
		}
	(
	  LOOKAHEAD(<MULTIPLICATION> Eatf())
	  <MULTIPLICATION> e2 = Eatf()
		{
		specificheAEmilia.Expression exp1 = list.get(list.size() - 1);
		specificheAEmilia.Moltiplicazione moltiplicazione = new specificheAEmilia.Moltiplicazione(exp1,e2);
		list.add(moltiplicazione);
		}
	|
	LOOKAHEAD(<DIVISION> Eatf())
	<DIVISION> e2 = Eatf()
		{
		specificheAEmilia.Expression exp2 = list.get(list.size() - 1);
		specificheAEmilia.Divisione divisione = new specificheAEmilia.Divisione(exp2,e2);
		list.add(divisione);
		}
	) *
		{
		specificheAEmilia.Expression exp3 = list.get(list.size() - 1);
		return exp3;
		}
	}

specificheAEmilia.Expression Ea() :
	{
	specificheAEmilia.Expression e1;
	specificheAEmilia.Expression e2;
	java.util.List<specificheAEmilia.Expression> list = new java.util.ArrayList<specificheAEmilia.Expression>();
	}
	{
	e1 = Eat()
		{
		list.add(e1);
		}
	(
	LOOKAHEAD(<ADDITION> Eat())
	<ADDITION> e2 = Eat()
		{
		specificheAEmilia.Expression exp1 = list.get(list.size() - 1);
		specificheAEmilia.Somma somma = new specificheAEmilia.Somma(exp1,e2);
		list.add(somma);
		}
	|
	LOOKAHEAD(<SUBTRACTION> Eat())
	<SUBTRACTION> e2 = Eat()
		{
		specificheAEmilia.Expression exp2 = list.get(list.size() - 1);
		specificheAEmilia.Sottrazione sottrazione = new specificheAEmilia.Sottrazione(exp2,e2);
		list.add(sottrazione);
		}
	) *
		{
		specificheAEmilia.Expression exp3 = list.get(list.size() - 1);
		return exp3;
		}
	}

specificheAEmilia.Expression Ebt() :
	{
	specificheAEmilia.Expression e1;
	specificheAEmilia.Expression e2;
	Token t1;
	}
	{
	t1 = <T_TRUE>
		{
		specificheAEmilia.Boolean b1 = new specificheAEmilia.Boolean(true);
		return b1;
		}
	| 
	t1 = <T_FALSE>
		{
		specificheAEmilia.Boolean b2 = new specificheAEmilia.Boolean(false);
		return b2;
		}
	|
	LOOKAHEAD(Ea() <LESS> Ea())
	e1 = Ea() <LESS> e2 = Ea()
		{
		specificheAEmilia.Minore minore = new specificheAEmilia.Minore(e1,e2);
		return minore;
		}
	|
	LOOKAHEAD(Ea() <LE> Ea())
	e1 = Ea() <LE> e2 = Ea()
		{
		specificheAEmilia.MinoreUguale minoreUguale = new specificheAEmilia.MinoreUguale(e1,e2);
		return minoreUguale;
		}
	|
	LOOKAHEAD(Ea() <GREATER> Ea())
	e1 = Ea() <GREATER> e2 = Ea()
		{
		specificheAEmilia.Maggiore maggiore = new specificheAEmilia.Maggiore(e1,e2);
		return maggiore;
		}
	|
	LOOKAHEAD(Ea() <GE> Ea())
	e1 = Ea() <GE> e2 = Ea()
		{
		specificheAEmilia.MaggioreUguale maggioreUguale = new specificheAEmilia.MaggioreUguale(e1,e2);
		return maggioreUguale;
		}
	|
	LOOKAHEAD(Ea() <EQUAL> Ea())
	e1 = Ea() <EQUAL> e2 = Ea()
		{
		specificheAEmilia.Equal equal = new specificheAEmilia.Equal(e1,e2);
		return equal;
		}
	|
	LOOKAHEAD(Ea() <NE> Ea())
	e1 = Ea() <NE> e2 = Ea()
		{
		specificheAEmilia.Different different = new specificheAEmilia.Different(e1,e2);
		return different;
		}
	|
	LOOKAHEAD(<LPAREN> Eb() <RPAREN>)
	<LPAREN> e1 = Eb() <RPAREN>
		{
		return e1;
		}
	|
	LOOKAHEAD(<EXCLAMATION> Ebt())
	<EXCLAMATION> e1 = Ebt()
		{
		return e1;
		} 
	}

specificheAEmilia.Expression Eb() :
	{
	specificheAEmilia.Expression e1;
	specificheAEmilia.Expression e2;
	java.util.List<specificheAEmilia.Expression> list = new java.util.ArrayList<specificheAEmilia.Expression>();
	}
	{
	e1 = Ebt()
		{
		list.add(e1);
		}
	(
	 LOOKAHEAD(<AND> Ebt())
	 <AND> e2 = Ebt()
		{
		specificheAEmilia.Expression exp1 = list.get(list.size() - 1);
		specificheAEmilia.And and = new specificheAEmilia.And(exp1,e2);
		list.add(and);
		}
	|
	LOOKAHEAD(<OR> Ebt())
	<OR> e2 = Ebt()
		{
		specificheAEmilia.Expression exp2 = list.get(list.size() - 1);		  
		specificheAEmilia.Or or = new specificheAEmilia.Or(exp2,e2);
		list.add(or);
		}
	) *
		{
		specificheAEmilia.Expression exp3 = list.get(list.size() - 1);
		return exp3;
		}
	}

specificheAEmilia.Expression E() :
	{
	specificheAEmilia.Expression ris;
	specificheAEmilia.Expression expression;
	specificheAEmilia.IdentExpr identExpr;
	Token t1;
	Token t2;  
	}
	{
	LOOKAHEAD(Ea(),
		{
		getToken(2).kind != LESS && getToken(2).kind != LE &&
		getToken(2).kind != GREATER && getToken(2).kind != GE &&
		getToken(2).kind != EQUAL && getToken(2).kind != NE
		}
	)
	ris = Ea()
		{
		return ris;
		}
	|
	LOOKAHEAD(Eb())
	ris = Eb()
		{
		return ris;
		}
	|
	LOOKAHEAD(El())
	ris = El()
		{
		return ris;
		}
	|
	LOOKAHEAD(Earr())
	ris = Earr()
		{
		return ris;
		}
	|
	LOOKAHEAD(Erecord())
	ris = Erecord()
		{
		return ris;
		}
	|
	LOOKAHEAD(<T_FIRST> <LPAREN> IdentExpr() <RPAREN>)
	<T_FIRST> <LPAREN> identExpr = IdentExpr() <RPAREN>
		{
		ris = new specificheAEmilia.First(identExpr);
		return ris;
		}
	|
	LOOKAHEAD(<T_READ> <LPAREN> E() <COMMA> IdentExpr() <RPAREN>)
	<T_READ> <LPAREN> expression = E() <COMMA> identExpr = IdentExpr() <RPAREN>
		{
		ris = new specificheAEmilia.Read(expression,identExpr);
		return ris;  
		}
	|
	LOOKAHEAD(<T_GET> <LPAREN> <T_ID > <COMMA > IdentExpr() <RPAREN>)
	<T_GET> <LPAREN> t1 = <T_ID > <COMMA > identExpr = IdentExpr() <RPAREN>
		{
		ris = new specificheAEmilia.Get(t1.image,identExpr);
		return ris;
		}         
	}

it.univaq.disim.sealab.ttep.rew.classes.RewardType RewardType() :
	{
	}
	{
	<T_STATE_REWARD>
		{
		return it.univaq.disim.sealab.ttep.rew.classes.RewardType.STATE_REWARD;		}
	|
	<T_TRANS_REWARD>
		{
		return it.univaq.disim.sealab.ttep.rew.classes.RewardType.TRANS_REWARD;		} 	}

it.univaq.disim.sealab.ttep.rew.classes.RewardAssign RewardAssign() :
	{
	Token t1;
	Token t2;
	Token t3;
	specificheAEmilia.Expression e1 = null;
	specificheAEmilia.Expression e2;
	specificheAEmilia.Expression e3 = null;
	it.univaq.disim.sealab.ttep.rew.classes.RewardType rewardType;
	specificheAEmilia.Expression e4;	}
	{
	<T_ENABLED> <LPAREN> t1 = <T_ID> (<LBRACKET> e1 = E() <RBRACKET>) ? <DOT> t2 = <T_ID> <RPAREN> <IMPL> rewardType = RewardType() <LPAREN> e4 = E() <RPAREN>
		{
		it.univaq.disim.sealab.ttep.rew.classes.RewardAssign rewardAssign = new it.univaq.disim.sealab.ttep.rew.classes.RewardAssign(t2.image,e1,t1.image,rewardType,e4);
		return rewardAssign;		}
	|
	<T_FOR_ALL> t1 =<T_ID> <T_IN> e1 = E() <DOTDOT> e2 = E() <T_ENABLED> <LPAREN> t2 = <T_ID> (<LBRACKET> e3 = E() <RBRACKET>) ? <DOT> t3 = <T_ID> <RPAREN> <IMPL> rewardType = RewardType() <LPAREN> e4 = E() <RPAREN>
		{
		it.univaq.disim.sealab.ttep.rew.classes.RewardAssignInd rewardAssignInd = new it.univaq.disim.sealab.ttep.rew.classes.RewardAssignInd(t3.image,e3,t2.image,t1.image,e1,e2,rewardType,e4);
		return rewardAssignInd;		}
	}

it.univaq.disim.sealab.ttep.rew.classes.RewardStructure RewardStructure() :
	{
	java.util.List<it.univaq.disim.sealab.ttep.rew.classes.RewardAssign> list = new java.util.ArrayList<it.univaq.disim.sealab.ttep.rew.classes.RewardAssign>();
	it.univaq.disim.sealab.ttep.rew.classes.RewardAssign ra;	}
	{
	(
	LOOKAHEAD(2) ra = RewardAssign()
		{
		list.add(ra);		}
	) +
		{
		it.univaq.disim.sealab.ttep.rew.classes.RewardStructure rewardStructure = new it.univaq.disim.sealab.ttep.rew.classes.RewardStructure(list);
		return rewardStructure;		}	}
it.univaq.disim.sealab.ttep.rew.classes.MeasureDef MeasureDef() :
	{
	Token t1;
	Token t2;
	specificheAEmilia.Expression e1 = null;
	specificheAEmilia.Expression e2;
	specificheAEmilia.Expression e3 = null;
	it.univaq.disim.sealab.ttep.rew.classes.RewardStructure rs;
	}
	{
	<T_MEASURE> t1 = <T_ID> (<LBRACKET> e1 = E() <RBRACKET>)? <T_IS> rs = RewardStructure()
		{
		it.univaq.disim.sealab.ttep.rew.classes.MeasureDef measureDef = new it.univaq.disim.sealab.ttep.rew.classes.MeasureDef(t1.image,e1,rs);
		return measureDef;		}
	|
	<T_FOR_ALL> t1 =<T_ID> <T_IN> e1 = E() <DOTDOT> e2 = E() <T_MEASURE> t2 = <T_ID> (<LBRACKET> e3 = E() <RBRACKET>)? <T_IS> rs = RewardStructure()
		{
		it.univaq.disim.sealab.ttep.rew.classes.MeasureDefInd measureDefInd = new it.univaq.disim.sealab.ttep.rew.classes.MeasureDefInd(t2.image,e3,rs,t1.image,e1,e2);
		return measureDefInd;		}
	}

it.univaq.disim.sealab.ttep.rew.classes.RewSpec RewSpec() :
	{
	java.util.List<it.univaq.disim.sealab.ttep.rew.classes.MeasureDef> list = new java.util.ArrayList<it.univaq.disim.sealab.ttep.rew.classes.MeasureDef>();
	it.univaq.disim.sealab.ttep.rew.classes.MeasureDef md;
	}
	{
	md = MeasureDef()
		{
		list.add(md);		}
	(
	 <SEMICOLON> md = MeasureDef()
		{
		list.add(md);		}
	 )* <EOF>
		{
		it.univaq.disim.sealab.ttep.rew.classes.RewSpec rewSpec = new it.univaq.disim.sealab.ttep.rew.classes.RewSpec(list);
		return rewSpec;		}
	}