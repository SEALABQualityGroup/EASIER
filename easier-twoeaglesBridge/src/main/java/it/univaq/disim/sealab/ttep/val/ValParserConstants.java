/* Generated By:JavaCC: Do not edit this line. ValParserConstants.java */
package it.univaq.disim.sealab.ttep.val;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ValParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int APEX = 7;
  /** RegularExpression Id. */
  int LPAREN = 8;
  /** RegularExpression Id. */
  int RPAREN = 9;
  /** RegularExpression Id. */
  int LBRACKET = 10;
  /** RegularExpression Id. */
  int RBRACKET = 11;
  /** RegularExpression Id. */
  int COLON = 12;
  /** RegularExpression Id. */
  int DASH = 13;
  /** RegularExpression Id. */
  int COMMA = 14;
  /** RegularExpression Id. */
  int T_STATIONARY = 15;
  /** RegularExpression Id. */
  int T_VALUE = 16;
  /** RegularExpression Id. */
  int T_OF = 17;
  /** RegularExpression Id. */
  int T_THE = 18;
  /** RegularExpression Id. */
  int T_PERFORMANCE = 19;
  /** RegularExpression Id. */
  int T_MEASURES = 20;
  /** RegularExpression Id. */
  int T_FOR = 21;
  /** RegularExpression Id. */
  int T_VALUE_M = 22;
  /** RegularExpression Id. */
  int T_MEASURE = 23;
  /** RegularExpression Id. */
  int T_GET = 24;
  /** RegularExpression Id. */
  int T_READ = 25;
  /** RegularExpression Id. */
  int T_FIRST = 26;
  /** RegularExpression Id. */
  int AND = 27;
  /** RegularExpression Id. */
  int OR = 28;
  /** RegularExpression Id. */
  int T_TRUE = 29;
  /** RegularExpression Id. */
  int T_FALSE = 30;
  /** RegularExpression Id. */
  int LE = 31;
  /** RegularExpression Id. */
  int GE = 32;
  /** RegularExpression Id. */
  int NE = 33;
  /** RegularExpression Id. */
  int T_LENGTH = 34;
  /** RegularExpression Id. */
  int T_LIST_CONS = 35;
  /** RegularExpression Id. */
  int T_TAIL = 36;
  /** RegularExpression Id. */
  int T_CONCAT = 37;
  /** RegularExpression Id. */
  int T_INSERT = 38;
  /** RegularExpression Id. */
  int T_REMOVE = 39;
  /** RegularExpression Id. */
  int T_ARRAY_CONS = 40;
  /** RegularExpression Id. */
  int T_WRITE = 41;
  /** RegularExpression Id. */
  int T_RECORD_CONS = 42;
  /** RegularExpression Id. */
  int T_PUT = 43;
  /** RegularExpression Id. */
  int T_ID = 44;
  /** RegularExpression Id. */
  int LETTER = 45;
  /** RegularExpression Id. */
  int DIGIT = 46;
  /** RegularExpression Id. */
  int T_NUMBER = 47;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 48;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 49;
  /** RegularExpression Id. */
  int HEX_LITERAL = 50;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 51;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 52;
  /** RegularExpression Id. */
  int EXPONENT = 53;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"\\n\"",
    "<token of kind 6>",
    "\"\\\"\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\":\"",
    "\"-\"",
    "\",\"",
    "\"Stationary\"",
    "\"value\"",
    "\"of\"",
    "\"the\"",
    "\"performance\"",
    "\"measures\"",
    "\"for\"",
    "\"Value\"",
    "\"measure\"",
    "\"get\"",
    "\"read\"",
    "\"first\"",
    "\"&&\"",
    "\"||\"",
    "\"true\"",
    "\"false\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"length\"",
    "\"list_cons\"",
    "\"tail\"",
    "\"concat\"",
    "\"insert\"",
    "\"remove\"",
    "\"array_cons\"",
    "\"write\"",
    "\"record_cons\"",
    "\"put\"",
    "<T_ID>",
    "<LETTER>",
    "<DIGIT>",
    "<T_NUMBER>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "\"*\"",
    "\"/\"",
    "\"+\"",
    "\"<\"",
    "\">\"",
    "\"=\"",
    "\"!\"",
  };

}
