import "metric_functions.eol";
import "thresholds.eol";

//libraries
import "library/artifact.eol";
import "library/association.eol";
//import "library/class.eol";
import "library/classifier.eol";
import "library/component.eol";
import "library/element.eol";
import "library/interaction.eol";
import "library/interactionFragment.eol";
import "library/interactionOperand.eol";
import "library/combinedFragment.eol";
import "library/interface.eol";
import "library/lifeline.eol";
import "library/manifestation.eol";
import "library/message.eol";
import "library/node.eol";
import "library/operation.eol";
import "library/package.eol";

//HELPER
import "library/HELPER.eol";

pre{
	showThresholds();
}


/*********************************************************************************************
 *																							 *
 *	 								Pipe and Filter 										 *
 *							Antipattern Detection and Validation					 		 *
 *										reviewed											 *
 *********************************************************************************************/

context UML!Operation {
	critique PaF {
		check: 
			not (self.F_probExec() and 	self.F_resDemand(th_maxResDemand()) and
				(self.F_T(th_SthReq()) or self.F_maxHwUtil(th_maxHwUtil()->first()) )) 
		message : "PaF <Operation> " + self.name
		fix {
			title : "Move it to a New Component deployed to a New Node"
			do {
				log("--------------");
				log("pattern PaF");
				log("moveOpNCNN on");
				log("self --> "+self.getName());
				self.moveToNewOwnerDeployedOnNewNode(); 
				log("--------------");
				log("");
			}
		}
		fix{
			title : "Move it to a New Component deployed to the Less Used neighbour Node"
			do{
				self.moveToNewOwnerDeployedOnNearLessUsedNode();
			}
		}
		fix{
			title : "Redeploy its Component to the Less Used neighbour Node"
			do{
				self.redeployOnNearLessUsedNode();
			}
		}
		fix{
			title : "Change its Component to the one with the Lowest Demand"
			do{
				log("--------------");
				log("pattern PaF");
				log("moveOpLC on");
				log("self --> "+self.getName());
				self.moveToLessCriticalOwner();
				log("--------------");
				log("");
			}
		}
		fix{
			title : "Redeploy its Component to New Node"
			do{
				log("--------------");
				log("pattern PaF");
				log("moveCompNN on");
				log("self --> "+self.getName());
				self.moveToNewNode();
				log("--------------");
				log("");
			}
		}
		fix{
			title: "Decomposition"
			do{
				self.decomposition();
			}
		}
	}
}


/*********************************************************************************************
 *																							 *
 *	 							Concurrent Processing Systems 								 *
 *							Antipattern Detection and Validation			     			 *
 *									 reviewwed												 *
 *********************************************************************************************/
 
 
/*********************************************************************************************
 *                                      WARNING												 *
 *							MAX HW UTIL is in the first position							 *
 *					CPU max and min are in second and third position						 *	
 *					DISK max and min are in fourth and fifth position						 *
 *********************************************************************************************
 
context Node {
	critique CPS {
		check: 
			not ( self.F_maxQL(th_maxQL()) and self.F_maxHwUtil(th_maxHwUtil()) )
		message : "CPS <" + self.type.name + "> " + self.name
		fix {
			title : "Move it to a new Component deployed to a new Node"
			
			do {
				self.moveToNewComponentDeployedOnNewNode(); 
			}
		}
		fix{
			title : "Move it to a new Component deployed to the less used neighbour Node"
			do{
				self.moveToNewComponentDeployedOnNearLessUsedNode();
			}
		}
		fix{
			title : "Redeploy its owning Component "+self.name+" to the less used neighbour Node"
			do{
				self.redeployOnNearLessUsedNode();
			}
		}
		fix{
			title : "Change its owning Component from "+self.name+" to the one with the lowest demand"
			do{
				self.moveToLessCriticalComponent();
			}
		}
	}
}

/*
context Node {
	critique CPS {
		check: 
			not( (self.F_maxQL(th_maxQL()) and self.F_maxCpuUtil(th_maxHwUtil()->second()) and self.F_resDemandCpuGreaterOrEqualThan(th_maxResDemand()->first())) or
				(self.F_maxQL(th_maxQL()) and self.F_maxDiskUtil(th_maxHwUtil()->fourth()))
			)
		message : "CPS <Node> " + self.getName()
		fix {
			title : "Move it to a New Component deployed to a New Node"
			do {
				log("--------------");
				log("pattern CPS");
				log("moveOpNCNN on");
				log("self --> "+self.getName());
				self.moveToNewComponentDeployedOnNewNode(); 
				log("--------------");
				log("");
			}
		}
		fix{
			title : "Move it to a New Component deployed to the Less Used neighbour Node"
			do{
				log("--------------");
				log("pattern CPS");
				log("moveOpNCLN on");
				log("self --> "+self.getName());
				self.moveToNewComponentDeployedOnNearLessUsedNode();
				log("--------------");
				log("");
			}
		}
		fix{
			title : "Redeploy its Component to the Less Used neighbour Node"
			do{
				log("--------------");
				log("pattern CPS");
				log("moveCompLN on");
				log("self --> "+self.getName());
				self.redeployOnNearLessUsedNode();
				log("--------------");
				log("");
			}
		}
		fix{
			title : "Change its Component to the one with the Lowest Demand"
			do{
				log("--------------");
				log("pattern CPS");
				log("moveOpLC on");
				log("self --> "+self.getName());
				self.moveToLessCriticalComponent();
				log("--------------");
				log("");
			}
		}
		fix{
			title : "Deploy its Component to New Node"
			do{
				log("--------------");
				log("pattern CPS");
				log("moveCompNN on");
				log("self --> "+self.getName());
				self.redeployOnNewNode();
				log("--------------");
				log("");
			}
		}
	}
}

/*
context Node {
	critique CPS_DISK {
		check: 
			not ( self.F_maxQL(th_maxQL()) and self.F_maxDiskUtil(th_maxHwUtil()->fourth()) )
		message : "CPS_DISK <Node> " + self.getName()
		fix {
			title : "Move its critical Operation to a New Component deployed to a New Node"
			
			do {
				self.moveToNewComponentDeployedOnNewNode(); 
			}
		}
		fix{
			title : "Move its critical Operation to a New Component deployed to the Less Used Neighbour Node"
			do{
				self.moveToNewComponentDeployedOnNearLessUsedNode();
			}
		}
		fix{
			title : "Redeploy its Critical Component to the Less Used Neighbour Node"
			do{
				self.redeployOnNearLessUsedNode();
			}
		}
		fix{
			title : "Redeploy its Critical Component to New Node"
			do{
				self.redeployOnNewNode();
			}
		}
		fix{
			title : "Change its owning Component from "+self.name+" to the one with the lowest demand"
			do{
				self.moveToLessCriticalComponent();
			}
		}
	}
}*/

/*********************************************************************************************
 *																							 *
 *	 								Extensive Processing  									 *
 *							Antipattern Detection and Validation							 *
 *										reviewed											 *
 *********************************************************************************************

context UML!Component {
 	critique ExtensiveProcessingAP{
 		check:
 			not (self.F_resDemand(th_maxResDemand(), th_minResDemand()) and self.F_probExec() and 
 						( self.F_maxHwUtil(th_maxHwUtil()->first()) or self.F_RT(th_SrtReq()) ))
 		message : "EP <" + self.type.name + "> " + self.name
 		fix {
			title : "Move it to a new Component deployed to a new Node"
			
			do {
				self.moveToNewComponentDeployedOnNewNode(); 
			}
		}
		fix{
			title : "Move it to a new Component deployed to the less used neighbour Node"
			do{
				self.moveToNewComponentDeployedOnNearLessUsedNode();
			}
		}
		fix{
			title : "Redeploy its owning Component "+self.name+" to the less used neighbour Node"
			do{
				self.redeployOnNearLessUsedNode();
			}
		}
		fix{
			title : "Change its owning Component from "+self.name+" to the one with the lowest demand"
			do{
				self.moveToLessCriticalComponent();
			}
		}
 	}
}

/*********************************************************************************************
 *																							 *
 *								Blob Controller & Container									 *
 *							Antipattern Detection and Validation							 *
 *										reviewed 											 *
 *********************************************************************************************

context UML!Component {
	critique Blob_DataContainer{
		check:
			not((self.F_numSupplierConnects(th_maxSupplierConnects()) and self.F_numMsgsIn(th_numReceivedMsgs()) and 
				(self.F_maxHwUtil(th_maxHwUtil()->first()) or self.F_maxNetUtil(th_maxNetUtil())) )
			)
		message : "Blob Container <" + self.type.name + "> " + self.getName()
		fix {
			title : "Move its critical operation to a New Component deployed to a New Node"
			
			do {
				self.moveToNewComponentDeployedOnNewNode(); 
			}
		}
		fix{
			title : "Move its critical operation to a New Component deployed to the Less Used neighbour Node"
			do{
				self.moveToNewComponentDeployedOnNearLessUsedNode();
			}
		}
		fix{
			title : "Redeploy it to the Less Used Neighbour Node"
			do{
				log("--------------");
				log("pattern Blob");
				log("moveCompLN on");
				log("self --> "+self.getName());
				self.redeployOnNearLessUsedNode();
				log("--------------");
				log("");
			}
		}
		fix{
			title : "Move its critial operation to the Less used Component"
			do{
				self.moveToLessCriticalComponent();
			}
		}
		fix{
			title : "Deploy it to New Node"
			do{
				log("--------------");
				log("pattern Blob");
				log("moveCompNN on");
				log("self --> "+self.getName());
				self.deployOnNewNode();
				log("--------------");
				log("");
			}
		}
		fix {
			title: "Reduce Supplier Connects of "+ self.getName()
			do{
				log("--------------");
				log("pattern Blob");
				log("reduceUsaged on");
				log("self --> "+self.getName());
				self.reduceNumberOfSupplierConnects(th_maxSupplierConnects());
			}
		}
		
		fix {
			title: "Reduce its Supplier Connects"
			do {
				log("--------------");
				log("pattern Blob");
				log("reduceProvided on");
				log("self --> "+self.getName());
				self.reduceNumberOfSupplierConnects(th_maxSupplierConnects());
				log("--------------");
				log("");
			}
		}
	}
}


context Component {
	critique Blob_DataController {
		check:
			not( self.F_numClientConnects(th_maxClientConnects()) and self.F_numMsgsOut(th_numSentMsgs()) and 
				(self.F_maxHwUtil(th_maxHwUtil()->first()) or self.F_maxNetUtil(th_maxNetUtil())) )
				
		message : "Blob Container <" + self.type.name + "> " + self.getName()
		fix {
			title : "Move its Critical Operation to a New Component deployed to a New Node"
			
			do {
				self.moveToNewComponentDeployedOnNewNode(); 
			}
		}
		fix{
			title : "Move its Critical Operation to a New Component deployed to the Less used Neighbour Node"
			do{
				self.moveToNewComponentDeployedOnNearLessUsedNode();
			}
		}
		fix{
			title : "Redeploy its Critical Component to the Less used Neighbour Node"
			do{
				self.redeployOnNearLessUsedNode();
			}
		}
		fix{
			title : "Move its Critical Operation  to the Component with the Lowest Demand"
			do{
				self.moveToLessCriticalComponent();
			}
		}
		fix{
			title : "Deploy its Critical Component to a New Node"
			do{
				self.deployOnNewNode();
			}
		}
		fix {
			title: "Reduce Client Connects of "+ self.getName()
			do{
				self.reduceNumberOfClientConnects(th_maxClientConnects());
			}
		}
	}
}


/*********************************************************************************************
 *																							 *
 *	 								Empty Semi Truck										 *
 *							Antipattern Detection and Validation							 *
 *										reviewed											 *
 *********************************************************************************************
 

context Component {
 	critique EmptySemiTruck{
 		check{
 			if(self.F_numRemMsgs(th_maxRemMsgs()) and 
 				(self.F_maxNetUtil(th_minNetUtil()) or self.F_numRemInst(th_maxRemInst())))
 					return false;
 			return true;
 		}
 		message : "EST <" + self.type.name + "> " + self.name
 		fix {
			title : "Apply Session Facade Pattern"
			do {
				self.applySessionFacade();
			}
		}
 	}
}


/*********************************************************************************************
 *																							 *
 *	 								Tower of Babel											 *
 *							Antipattern Detection and Validation							 *
 *									reviewed												 *
 *********************************************************************************************
 
 context Component {
 	critique TowerOfBabel{
 		check{
 			if(self.F_numExF(th_maxExF()) and self.F_maxHwUtil(th_maxHwUtil()))
 				return false;
 			return true;
 		}
 		message : "ToB <" + self.type.name + "> " + self.name
 		fix {
			title : "Apply the most used format"
			do {
				self.applyStandardFormat();
			}
		}
		fix{
			title : "Redeploy its owning Component "+self.name+" to the less used neighbour Node"
			do{
				self.redeployOnNearLessUsedNode();
			}
		}
 	}
}

/*********************************************************************************************
 *																							 *
 *	 						    Circuitous  Treasure Hunt									 *
 *							Antipattern Detection and Validation							 *
 *																							 *
 *********************************************************************************************/
 
/*********************************************************************************************
 *																							 *
 *	 						    		One Line Bridge										 *
 *							Antipattern Detection and Validation							 *
 *																							 *
 *********************************************************************************************/
 
/*********************************************************************************************
 *																							 *
 *					    		Excessive Dynamic Allocation								 *
 *							Antipattern Detection and Validation							 *
 *																							 *
 *********************************************************************************************/
 