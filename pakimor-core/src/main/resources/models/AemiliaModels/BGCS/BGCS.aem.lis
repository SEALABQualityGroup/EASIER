(1)	ARCHI_TYPE BGCS(
(2)			   const weight change_prob := 0.7,
(3)			   const rate net_rate := 1500,
(4)			   const rate sec_rate := 300,
(5)			   const rate gh_rate := 1000,
(6)			   const rate db_rate := 2000,
(7)			   const rate sensing_rate := 500,
(8)			   const integer nb_sensors := 5,
(9)			   const integer buffer_size := 10)
(10)
(11)
(12)	ARCHI_ELEM_TYPES
(13)
(14)	    ELEM_TYPE APP_Type(const weight change_prob)
(15)
(16)			BEHAVIOR
(17)
(18)	Start( void;void)
(19)	 = <generate_auth_req, inf> . <send_auth_req, inf> . <receive_auth_resp, _> . Authenticated();
(20)	Authenticated( void;void)
(21)	 = <generate_monitor_req, inf> . Monitor();
(22)	Monitor( void;void)
(23)	 = <send_monitor_req, inf> . <receive_monitor_resp, _> . choice
(24)	 {
(25)	 	<change, inf (1, change_prob)> . Change(),
(26)	 	<restart, inf (1, 1 - change_prob)> . Start()
(27)	 };
(28)						Change(	 void;void) = <send_change_req, inf> . Start()
(29)			INPUT_INTERACTIONS
(30)
(31)				UNI receive_auth_resp;
(32)				receive_monitor_resp
(33)
(34)			OUTPUT_INTERACTIONS
(35)
(36)				UNI send_auth_req;
(37)				send_monitor_req;
(38)				send_change_req
(39)
(40)	    ELEM_TYPE Net_Type(const rate net_rate)
(41)
(42)			BEHAVIOR
(43)
(44)						Forward(	 void;void) = choice
(45)						{
(46)							<receive_auth_req, _> . <send_auth_req, exp(net_rate)> . Forward(),
(47)							<receive_auth_resp, _> . <send_auth_resp, exp(net_rate)> . Forward(),
(48)							<receive_monitor_req, _> . <send_monitor_req, exp(net_rate)> . Forward(),
(49)							<receive_monitor_resp, _> . <send_monitor_resp, exp(net_rate)> . Forward(),
(50)							<receive_change_req, _> . <send_change_req, exp(net_rate)> . Forward()
(51)						}
(52)			INPUT_INTERACTIONS
(53)
(54)				UNI receive_auth_req;
(55)				receive_auth_resp;
(56)				receive_change_req;
(57)				receive_monitor_req;
(58)				receive_monitor_resp
(59)
(60)			OUTPUT_INTERACTIONS
(61)
(62)				UNI send_auth_req;
(63)				send_auth_resp;
(64)				send_change_req;
(65)				send_monitor_req;
(66)				send_monitor_resp
(67)
(68)	    ELEM_TYPE Sec_Type(const integer buffer_size,const rate sec_rate)
(69)
(70)			BEHAVIOR
(71)
(72)						Authenticate(	integer(0..buffer_size) buffer_index := 0;void) = choice
(73)						{
(74)							cond(buffer_index < buffer_size) ->		<receive_auth_req, _> . Authenticate(buffer_index + 1),
(75)							cond(buffer_index > 0) ->		<send_account_req, inf> . <receive_account_resp, _> . <send_auth_resp, exp(sec_rate)> . Authenticate(buffer_index - 1)
(76)						}
(77)			INPUT_INTERACTIONS
(78)
(79)				UNI receive_auth_req;
(80)				receive_account_resp
(81)
(82)			OUTPUT_INTERACTIONS
(83)
(84)				UNI send_auth_resp;
(85)				send_account_req
(86)
(87)	    ELEM_TYPE GH_Type(const rate gh_rate)
(88)
(89)			BEHAVIOR
(90)
(91)	Start( void;void)
(92)	 = choice
(93)	 {
(94)	 	<receive_monitor_req, _> . <send_data_req, exp(gh_rate)> . Wait(),
(95)	 	<receive_change_req, _> . <handle_change_req, exp(gh_rate)> . Start()
(96)	 };
(97)						Wait(	 void;void) = <receive_data_resp, _> . <send_monitor_resp, exp(gh_rate)> . Start()
(98)			INPUT_INTERACTIONS
(99)
(100)				UNI receive_monitor_req;
(101)				receive_change_req;
(102)				receive_data_resp
(103)
(104)			OUTPUT_INTERACTIONS
(105)
(106)				UNI send_monitor_resp;
(107)				send_data_req
(108)
(109)	    ELEM_TYPE DB_Type(const rate db_rate)
(110)
(111)			BEHAVIOR
(112)
(113)						Fetch(	 void;void) = choice
(114)						{
(115)							<receive_account_req, _> . <fetch_account, exp(db_rate)> . <send_account_resp, inf> . Fetch(),
(116)							<receive_data_req, _> . <fetch_data, exp(db_rate)> . <send_data_resp, inf> . Fetch(),
(117)							<receive_update_req, _> . <handle_update, exp(db_rate)> . Fetch()
(118)						}
(119)			INPUT_INTERACTIONS
(120)
(121)				UNI receive_data_req;
(122)				receive_account_req
(123)				OR receive_update_req
(124)
(125)			OUTPUT_INTERACTIONS
(126)
(127)				UNI send_data_resp;
(128)				send_account_resp
(129)
(130)	    ELEM_TYPE Sensor_Type(const rate sensing_rate)
(131)
(132)			BEHAVIOR
(133)
(134)						Sensing(	 void;void) = <sense, exp(sensing_rate)> . <send_update_req, inf> . Sensing()
(135)			INPUT_INTERACTIONS
(136)
(137)				void
(138)
(139)			OUTPUT_INTERACTIONS
(140)
(141)				UNI send_update_req
(142)
(143)
(144)
(145)	ARCHI_TOPOLOGY
(146)
(147)	           ARCHI_ELEM_INSTANCES
(148)						APP : APP_Type( change_prob);
(149)	                    NET : Net_Type( net_rate);
(150)	                    SEC : Sec_Type( buffer_size, sec_rate);
(151)	                    GH : GH_Type( gh_rate);
(152)	                    DB : DB_Type( db_rate);
(153)	                    S[1] : Sensor_Type( sensing_rate);
(154)	                    S[2] : Sensor_Type( sensing_rate);
(155)	                    S[3] : Sensor_Type( sensing_rate);
(156)	                    S[4] : Sensor_Type( sensing_rate);
(157)	                    S[5] : Sensor_Type( sensing_rate)
(158)
(159)			   ARCHI_INTERACTIONS
(160)						void
(161)
(162)			   ARCHI_ATTACHMENTS
(163)						FROM APP.send_auth_req TO NET.receive_auth_req;
(164)						FROM NET.send_auth_resp TO APP.receive_auth_resp;
(165)						FROM APP.send_monitor_req TO NET.receive_monitor_req;
(166)						FROM NET.send_monitor_resp TO APP.receive_monitor_resp;
(167)						FROM APP.send_change_req TO NET.receive_change_req;
(168)						FROM NET.send_auth_req TO SEC.receive_auth_req;
(169)						FROM SEC.send_auth_resp TO NET.receive_auth_resp;
(170)						FROM NET.send_monitor_req TO GH.receive_monitor_req;
(171)						FROM GH.send_monitor_resp TO NET.receive_monitor_resp;
(172)						FROM NET.send_change_req TO GH.receive_change_req;
(173)						FROM SEC.send_account_req TO DB.receive_account_req;
(174)						FROM DB.send_account_resp TO SEC.receive_account_resp;
(175)						FROM GH.send_data_req TO DB.receive_data_req;
(176)						FROM DB.send_data_resp TO GH.receive_data_resp;
(177)						FROM S[1].send_update_req TO DB.receive_update_req;
(178)						FROM S[2].send_update_req TO DB.receive_update_req;
(179)						FROM S[3].send_update_req TO DB.receive_update_req;
(180)						FROM S[4].send_update_req TO DB.receive_update_req;
(181)						FROM S[5].send_update_req TO DB.receive_update_req
(182)
(183)	END
(184)


Warning: the formal parameter identifier nb_sensors is not used


>>>> 0 errors
>>>> 1 warning