(1)	ARCHI_TYPE BGCS(
(2)			   const weight change_prob := 0.7,
(3)			   const rate net_rate := 1500,
(4)			   const rate sec_rate := 300,
(5)			   const rate gh_rate := 1000,
(6)			   const rate db_rate := 2000,
(7)			   const rate sensing_rate := 500,
(8)			   const integer buffer_size := 10)
(9)
(10)
(11)	ARCHI_ELEM_TYPES
(12)
(13)	    ELEM_TYPE APP_Type(const weight change_prob)
(14)
(15)			BEHAVIOR
(16)
(17)	Start( void;void)
(18)	 = <generate_auth_req, inf> . <send_auth_req, inf> . <receive_auth_resp, _> . Authenticated();
(19)	Authenticated( void;void)
(20)	 = <generate_monitor_req, inf> . Monitor();
(21)	Monitor( void;void)
(22)	 = <send_monitor_req, inf> . <receive_monitor_resp, _> . choice
(23)	 {
(24)	 	<change, inf (1, change_prob)> . Change(),
(25)	 	<restart, inf (1, 1 - change_prob)> . Start()
(26)	 };
(27)						Change(	 void;void) = <send_change_req, inf> . Start()
(28)			INPUT_INTERACTIONS
(29)
(30)				UNI receive_auth_resp;
(31)				receive_monitor_resp
(32)
(33)			OUTPUT_INTERACTIONS
(34)
(35)				UNI send_auth_req;
(36)				send_monitor_req;
(37)				send_change_req
(38)
(39)	    ELEM_TYPE Net_Type(const rate net_rate)
(40)
(41)			BEHAVIOR
(42)
(43)						Forward(	 void;void) = choice
(44)						{
(45)							<receive_auth_req, _> . <send_auth_req, exp(net_rate)> . Forward(),
(46)							<receive_auth_resp, _> . <send_auth_resp, exp(net_rate)> . Forward(),
(47)							<receive_monitor_req, _> . <send_monitor_req, exp(net_rate)> . Forward(),
(48)							<receive_monitor_resp, _> . <send_monitor_resp, exp(net_rate)> . Forward(),
(49)							<receive_change_req, _> . <send_change_req, exp(net_rate)> . Forward()
(50)						}
(51)			INPUT_INTERACTIONS
(52)
(53)				UNI receive_auth_req;
(54)				receive_auth_resp;
(55)				receive_change_req;
(56)				receive_monitor_req;
(57)				receive_monitor_resp
(58)
(59)			OUTPUT_INTERACTIONS
(60)
(61)				UNI send_auth_req;
(62)				send_auth_resp;
(63)				send_change_req;
(64)				send_monitor_req;
(65)				send_monitor_resp
(66)
(67)	    ELEM_TYPE Sec_Type(const integer buffer_size,const rate sec_rate)
(68)
(69)			BEHAVIOR
(70)
(71)						Authenticate(	integer(0..buffer_size) buffer_index := 0;void) = choice
(72)						{
(73)							cond(buffer_index < buffer_size) ->		<receive_auth_req, _> . Authenticate(buffer_index + 1),
(74)							cond(buffer_index > 0) ->		<send_account_req, inf> . <receive_account_resp, _> . <send_auth_resp, exp(sec_rate)> . Authenticate(buffer_index - 1)
(75)						}
(76)			INPUT_INTERACTIONS
(77)
(78)				UNI receive_auth_req;
(79)				receive_account_resp
(80)
(81)			OUTPUT_INTERACTIONS
(82)
(83)				UNI send_auth_resp;
(84)				send_account_req
(85)
(86)	    ELEM_TYPE GH_Type(const rate gh_rate)
(87)
(88)			BEHAVIOR
(89)
(90)	Start( void;void)
(91)	 = choice
(92)	 {
(93)	 	<receive_monitor_req, _> . <send_data_req, exp(gh_rate)> . Wait(),
(94)	 	<receive_change_req, _> . <handle_change_req, exp(gh_rate)> . Start()
(95)	 };
(96)						Wait(	 void;void) = <receive_data_resp, _> . <send_monitor_resp, exp(gh_rate)> . Start()
(97)			INPUT_INTERACTIONS
(98)
(99)				UNI receive_monitor_req;
(100)				receive_change_req;
(101)				receive_data_resp
(102)
(103)			OUTPUT_INTERACTIONS
(104)
(105)				UNI send_monitor_resp;
(106)				send_data_req
(107)
(108)	    ELEM_TYPE DB_Type(const rate db_rate)
(109)
(110)			BEHAVIOR
(111)
(112)						Fetch(	 void;void) = choice
(113)						{
(114)							<receive_account_req, _> . <fetch_account, exp(db_rate)> . <send_account_resp, inf> . Fetch(),
(115)							<receive_data_req, _> . <fetch_data, exp(db_rate)> . <send_data_resp, inf> . Fetch(),
(116)							<receive_update_req, _> . <handle_update, exp(db_rate)> . Fetch()
(117)						}
(118)			INPUT_INTERACTIONS
(119)
(120)				UNI receive_data_req;
(121)				receive_account_req
(122)				OR receive_update_req
(123)
(124)			OUTPUT_INTERACTIONS
(125)
(126)				UNI send_data_resp;
(127)				send_account_resp
(128)
(129)	    ELEM_TYPE Sensor_Type(const rate sensing_rate)
(130)
(131)			BEHAVIOR
(132)
(133)						Sensing(	 void;void) = <sense, exp(sensing_rate)> . <send_update_req, inf> . Sensing()
(134)			INPUT_INTERACTIONS
(135)
(136)				void
(137)
(138)			OUTPUT_INTERACTIONS
(139)
(140)				UNI send_update_req
(141)
(142)
(143)
(144)	ARCHI_TOPOLOGY
(145)
(146)	           ARCHI_ELEM_INSTANCES
(147)						APP : APP_Type( change_prob);
(148)	                    NET : Net_Type( net_rate);
(149)	                    SEC : Sec_Type( buffer_size, sec_rate);
(150)	                    GH : GH_Type( gh_rate);
(151)	                    DB : DB_Type( db_rate);
(152)	                    S[1] : Sensor_Type( sensing_rate);
(153)	                    S[2] : Sensor_Type( sensing_rate);
(154)	                    S[3] : Sensor_Type( sensing_rate);
(155)	                    S[4] : Sensor_Type( sensing_rate);
(156)	                    S[5] : Sensor_Type( sensing_rate)
(157)
(158)			   ARCHI_INTERACTIONS
(159)						void
(160)
(161)			   ARCHI_ATTACHMENTS
(162)						FROM APP.send_auth_req TO NET.receive_auth_req;
(163)						FROM NET.send_auth_resp TO APP.receive_auth_resp;
(164)						FROM APP.send_monitor_req TO NET.receive_monitor_req;
(165)						FROM NET.send_monitor_resp TO APP.receive_monitor_resp;
(166)						FROM APP.send_change_req TO NET.receive_change_req;
(167)						FROM NET.send_auth_req TO SEC.receive_auth_req;
(168)						FROM SEC.send_auth_resp TO NET.receive_auth_resp;
(169)						FROM NET.send_monitor_req TO GH.receive_monitor_req;
(170)						FROM GH.send_monitor_resp TO NET.receive_monitor_resp;
(171)						FROM NET.send_change_req TO GH.receive_change_req;
(172)						FROM SEC.send_account_req TO DB.receive_account_req;
(173)						FROM DB.send_account_resp TO SEC.receive_account_resp;
(174)						FROM GH.send_data_req TO DB.receive_data_req;
(175)						FROM DB.send_data_resp TO GH.receive_data_resp;
(176)						FROM S[1].send_update_req TO DB.receive_update_req;
(177)						FROM S[2].send_update_req TO DB.receive_update_req;
(178)						FROM S[3].send_update_req TO DB.receive_update_req;
(179)						FROM S[4].send_update_req TO DB.receive_update_req;
(180)						FROM S[5].send_update_req TO DB.receive_update_req
(181)
(182)	END
(183)



>>>> 0 errors
>>>> 0 warnings