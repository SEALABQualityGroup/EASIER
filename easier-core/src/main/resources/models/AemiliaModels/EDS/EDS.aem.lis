(1)	ARCHI_TYPE eds(
(2)			   const integer sample_cached_in_rda := 150,
(3)			   const integer responder_number := 2,
(4)			   const rate sensors_sample_rate := 15,
(5)			   const rate transfer_rate_lvl_0_net := 12.04,
(6)			   const rate transfer_rate_lvl_1_net := 31.25,
(7)			   const rate disk_store_rate := 8000000,
(8)			   const integer simultaneous_notifications := 2)
(9)
(10)
(11)	ARCHI_ELEM_TYPES
(12)
(13)	    ELEM_TYPE Clock_Type(void)
(14)
(15)			BEHAVIOR
(16)
(17)
(18)				Clock( void; void) =
(19)						<elapse_tick, inf> . Clock()
(20)
(21)			INPUT_INTERACTIONS
(22)
(23)				void
(24)
(25)			OUTPUT_INTERACTIONS
(26)
(27)				AND elapse_tick
(28)
(29)	    ELEM_TYPE RDA_Type(const integer cached_samples,const rate disk_store_rate,const rate sensors_sample_rate)
(30)
(31)			BEHAVIOR
(32)
(33)
(34)				StoreData(integer(0..cached_samples) item_num := 0; void) =
(35)						choice
(36)						{
(37)							cond(item_num < cached_samples) ->		<acquire_sample, _> . StoreData(item_num + 1),
(38)							cond(item_num >= cached_samples) ->		<acquire_sample, _> . <store, exp(disk_store_rate)> . <send_sample, inf> . <acquire_feedback, _> . StoreData(1)
(39)						}
(40)
(41)			INPUT_INTERACTIONS
(42)
(43)				UNI acquire_feedback;
(44)				acquire_sample
(45)
(46)			OUTPUT_INTERACTIONS
(47)
(48)				UNI send_sample
(49)
(50)	    ELEM_TYPE NetUpRT_Type(const integer simultaneous_notifications,const rate upload_rate)
(51)
(52)			BEHAVIOR
(53)
(54)
(55)				TransferData(integer(0..simultaneous_notifications) item_num := 0; void) =
(56)						choice
(57)						{
(58)							cond(item_num < simultaneous_notifications) ->		<receive, _> . TransferData(item_num + 1),
(59)							cond(item_num > 0) ->		<forward, exp(upload_rate)> . TransferData(item_num - 1)
(60)						}
(61)
(62)			INPUT_INTERACTIONS
(63)
(64)				OR receive
(65)
(66)			OUTPUT_INTERACTIONS
(67)
(68)				OR forward
(69)
(70)	    ELEM_TYPE NetDownRT_Type(const integer simultaneous_notifications,const rate download_rate)
(71)
(72)			BEHAVIOR
(73)
(74)
(75)				TransferData(integer(0..simultaneous_notifications) item_num := 0; void) =
(76)						choice
(77)						{
(78)							cond(item_num < simultaneous_notifications) ->		<receive, _> . TransferData(item_num + 1),
(79)							cond(item_num > 0) ->		<forward, exp(download_rate)> . TransferData(item_num - 1)
(80)						}
(81)
(82)			INPUT_INTERACTIONS
(83)
(84)				OR receive
(85)
(86)			OUTPUT_INTERACTIONS
(87)
(88)				OR forward
(89)
(90)	    ELEM_TYPE TLDA_Type(void)
(91)
(92)			BEHAVIOR
(93)
(94)
(95)				TldaState( void; void) =
(96)						<acquire_sample, _> . <send_sample, inf> . <acquire_feedback, _> . <send_feedback, inf> . TldaState()
(97)
(98)			INPUT_INTERACTIONS
(99)
(100)				UNI acquire_sample;
(101)				acquire_feedback
(102)
(103)			OUTPUT_INTERACTIONS
(104)
(105)				UNI send_sample;
(106)				send_feedback
(107)
(108)	    ELEM_TYPE NetUpTT_Type(const integer simultaneous_notifications,const rate upload_rate)
(109)
(110)			BEHAVIOR
(111)
(112)
(113)				TransferData(integer(0..simultaneous_notifications) item_num := 0; void) =
(114)						choice
(115)						{
(116)							cond(item_num < simultaneous_notifications) ->		<receive, _> . TransferData(item_num + 1),
(117)							cond(item_num > 0) ->		<forward, exp(upload_rate)> . TransferData(item_num - 1)
(118)						}
(119)
(120)			INPUT_INTERACTIONS
(121)
(122)				OR receive
(123)
(124)			OUTPUT_INTERACTIONS
(125)
(126)				OR forward
(127)
(128)	    ELEM_TYPE NetDownTT_Type(const integer simultaneous_notifications,const rate download_rate)
(129)
(130)			BEHAVIOR
(131)
(132)
(133)				TransferData(integer(0..simultaneous_notifications) item_num := 0; void) =
(134)						choice
(135)						{
(136)							cond(item_num < simultaneous_notifications) ->		<receive, _> . TransferData(item_num + 1),
(137)							cond(item_num > 0) ->		<forward, exp(download_rate)> . TransferData(item_num - 1)
(138)						}
(139)
(140)			INPUT_INTERACTIONS
(141)
(142)				OR receive
(143)
(144)			OUTPUT_INTERACTIONS
(145)
(146)				UNI forward
(147)
(148)	    ELEM_TYPE TLWPC_Type(const integer simultaneous_notifications,const rate data_fatch_rate)
(149)
(150)			BEHAVIOR
(151)
(152)
(153)				StoreData(integer(0..simultaneous_notifications) item_num := 0; void) =
(154)						choice
(155)						{
(156)							cond(item_num < simultaneous_notifications) ->		<acquire_sample, _> . StoreData(item_num + 1),
(157)							cond(item_num > 0) ->		<send_feedback, exp(data_fatch_rate)> . StoreData(item_num - 1)
(158)						}
(159)
(160)			INPUT_INTERACTIONS
(161)
(162)				UNI acquire_sample
(163)
(164)			OUTPUT_INTERACTIONS
(165)
(166)				UNI send_feedback
(167)
(168)
(169)
(170)	ARCHI_TOPOLOGY
(171)
(172)	           ARCHI_ELEM_INSTANCES
(173)						CK : Clock_Type();
(174)	                    RD[1] : RDA_Type( sample_cached_in_rda, disk_store_rate, sensors_sample_rate);
(175)	                    RD[2] : RDA_Type( sample_cached_in_rda, disk_store_rate, sensors_sample_rate);
(176)	                    TL : TLDA_Type();
(177)	                    WP : TLWPC_Type( 1, disk_store_rate);
(178)	                    TR : NetDownRT_Type( simultaneous_notifications, transfer_rate_lvl_1_net);
(179)	                    RT : NetUpRT_Type( simultaneous_notifications, transfer_rate_lvl_1_net);
(180)	                    WT : NetDownTT_Type( simultaneous_notifications, transfer_rate_lvl_0_net);
(181)	                    TW : NetUpTT_Type( simultaneous_notifications, transfer_rate_lvl_0_net)
(182)
(183)			   ARCHI_INTERACTIONS
(184)						void
(185)
(186)			   ARCHI_ATTACHMENTS
(187)						FROM CK.elapse_tick TO RD[1].acquire_sample;
(188)						FROM CK.elapse_tick TO RD[2].acquire_sample;
(189)						FROM RD[1].send_sample TO RT.receive;
(190)						FROM RD[2].send_sample TO RT.receive;
(191)						FROM RT.forward TO TL.acquire_sample;
(192)						FROM TR.forward TO RD[1].acquire_feedback;
(193)						FROM TR.forward TO RD[2].acquire_feedback;
(194)						FROM TL.send_sample TO TW.receive;
(195)						FROM TL.send_feedback TO TR.receive;
(196)						FROM TW.forward TO WP.acquire_sample;
(197)						FROM WT.forward TO TL.acquire_feedback;
(198)						FROM WP.send_feedback TO WT.receive
(199)
(200)	END
(201)


Warning: the formal parameter identifier RDA_Type.sensors_sample_rate is not used

Warning: the formal parameter identifier responder_number is not used


>>>> 0 errors
>>>> 2 warnings