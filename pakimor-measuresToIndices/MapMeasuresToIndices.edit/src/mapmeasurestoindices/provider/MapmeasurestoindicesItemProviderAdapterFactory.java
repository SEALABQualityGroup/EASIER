/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package mapmeasurestoindices.provider;

import java.util.ArrayList;
import java.util.Collection;

import mapmeasurestoindices.util.MapmeasurestoindicesAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MapmeasurestoindicesItemProviderAdapterFactory extends MapmeasurestoindicesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MapmeasurestoindicesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link mapmeasurestoindices.MeasureMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasureMappingItemProvider measureMappingItemProvider;

	/**
	 * This creates an adapter for a {@link mapmeasurestoindices.MeasureMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasureMappingAdapter() {
		if (measureMappingItemProvider == null) {
			measureMappingItemProvider = new MeasureMappingItemProvider(this);
		}

		return measureMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mapmeasurestoindices.MeasureToArchiElemInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasureToArchiElemInstanceItemProvider measureToArchiElemInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link mapmeasurestoindices.MeasureToArchiElemInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasureToArchiElemInstanceAdapter() {
		if (measureToArchiElemInstanceItemProvider == null) {
			measureToArchiElemInstanceItemProvider = new MeasureToArchiElemInstanceItemProvider(this);
		}

		return measureToArchiElemInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mapmeasurestoindices.MeasureToAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasureToActionItemProvider measureToActionItemProvider;

	/**
	 * This creates an adapter for a {@link mapmeasurestoindices.MeasureToAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasureToActionAdapter() {
		if (measureToActionItemProvider == null) {
			measureToActionItemProvider = new MeasureToActionItemProvider(this);
		}

		return measureToActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mapmeasurestoindices.RewMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RewMappingItemProvider rewMappingItemProvider;

	/**
	 * This creates an adapter for a {@link mapmeasurestoindices.RewMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRewMappingAdapter() {
		if (rewMappingItemProvider == null) {
			rewMappingItemProvider = new RewMappingItemProvider(this);
		}

		return rewMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mapmeasurestoindices.ActionMeasure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionMeasureItemProvider actionMeasureItemProvider;

	/**
	 * This creates an adapter for a {@link mapmeasurestoindices.ActionMeasure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionMeasureAdapter() {
		if (actionMeasureItemProvider == null) {
			actionMeasureItemProvider = new ActionMeasureItemProvider(this);
		}

		return actionMeasureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mapmeasurestoindices.AeiMeasure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AeiMeasureItemProvider aeiMeasureItemProvider;

	/**
	 * This creates an adapter for a {@link mapmeasurestoindices.AeiMeasure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAeiMeasureAdapter() {
		if (aeiMeasureItemProvider == null) {
			aeiMeasureItemProvider = new AeiMeasureItemProvider(this);
		}

		return aeiMeasureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mapmeasurestoindices.ArchiIntMeasure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArchiIntMeasureItemProvider archiIntMeasureItemProvider;

	/**
	 * This creates an adapter for a {@link mapmeasurestoindices.ArchiIntMeasure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArchiIntMeasureAdapter() {
		if (archiIntMeasureItemProvider == null) {
			archiIntMeasureItemProvider = new ArchiIntMeasureItemProvider(this);
		}

		return archiIntMeasureItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (measureMappingItemProvider != null) measureMappingItemProvider.dispose();
		if (measureToArchiElemInstanceItemProvider != null) measureToArchiElemInstanceItemProvider.dispose();
		if (measureToActionItemProvider != null) measureToActionItemProvider.dispose();
		if (rewMappingItemProvider != null) rewMappingItemProvider.dispose();
		if (actionMeasureItemProvider != null) actionMeasureItemProvider.dispose();
		if (aeiMeasureItemProvider != null) aeiMeasureItemProvider.dispose();
		if (archiIntMeasureItemProvider != null) archiIntMeasureItemProvider.dispose();
	}

}
