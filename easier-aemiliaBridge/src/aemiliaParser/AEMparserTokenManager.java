/* Generated By:JavaCC: Do not edit this line. AEMparserTokenManager.java */
package aemiliaParser;
import specificheAEmilia.*;

/** Token Manager. */
public class AEMparserTokenManager implements AEMparserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80000L) != 0L)
            return 26;
         if ((active0 & 0x20L) != 0L)
            return 70;
         if ((active0 & 0xffffffffe0000000L) != 0L || (active1 & 0x3ffffffffffffffL) != 0L)
         {
            jjmatchedKind = 138;
            return 26;
         }
         return -1;
      case 1:
         if ((active0 & 0xa01882200000000L) != 0L)
            return 26;
         if ((active0 & 0xf5fe77dde0000000L) != 0L || (active1 & 0x3ffffffffffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 138;
               jjmatchedPos = 1;
            }
            return 26;
         }
         return -1;
      case 2:
         if ((active0 & 0x1042001800000000L) != 0L || (active1 & 0x300000004603c03L) != 0L)
            return 26;
         if ((active0 & 0xe5bdf7c7e0000000L) != 0L || (active1 & 0xfffffffb9fc3fcL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 138;
               jjmatchedPos = 2;
            }
            return 26;
         }
         return -1;
      case 3:
         if ((active0 & 0x8000440000000000L) != 0L || (active1 & 0x102d0010144278L) != 0L)
            return 26;
         if ((active0 & 0x65fdb3c7e0000000L) != 0L || (active1 & 0xefd2ffef8b8184L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 138;
               jjmatchedPos = 3;
            }
            return 26;
         }
         return -1;
      case 4:
         if ((active0 & 0x6000000000000000L) != 0L || (active1 & 0x2c120002098000L) != 0L)
            return 26;
         if ((active0 & 0x5fdb3c7e0000000L) != 0L || (active1 & 0xc3c8ffed820184L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 138;
               jjmatchedPos = 4;
            }
            return 26;
         }
         return -1;
      case 5:
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0xc3c04061020084L) != 0L)
            return 26;
         if ((active0 & 0x4fdb3c7e0000000L) != 0L || (active1 & 0x808bf8c800100L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 138;
               jjmatchedPos = 5;
            }
            return 26;
         }
         return -1;
      case 6:
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x8808000100L) != 0L)
            return 26;
         if ((active0 & 0xfdb3c7e0000000L) != 0L || (active1 & 0x88083784800000L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 6;
            return 26;
         }
         return -1;
      case 7:
         if ((active0 & 0x8000100000000L) != 0L || (active1 & 0x480000000L) != 0L)
            return 26;
         if ((active0 & 0xf5b3c6e0000000L) != 0L || (active1 & 0x88083304800000L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 7;
            return 26;
         }
         return -1;
      case 8:
         if ((active0 & 0xf533c660000000L) != 0L || (active1 & 0x88001004000000L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 8;
            return 26;
         }
         if ((active0 & 0x800080000000L) != 0L || (active1 & 0x82300800000L) != 0L)
            return 26;
         return -1;
      case 9:
         if ((active0 & 0x20000000L) != 0L || (active1 & 0x8000000000000L) != 0L)
            return 26;
         if ((active0 & 0xf533c640000000L) != 0L || (active1 & 0x80001004000000L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 9;
            return 26;
         }
         return -1;
      case 10:
         if ((active1 & 0x80000004000000L) != 0L)
            return 26;
         if ((active0 & 0xf533c640000000L) != 0L || (active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 10;
            return 26;
         }
         return -1;
      case 11:
         if ((active0 & 0x1000000000000L) != 0L || (active1 & 0x1000000000L) != 0L)
            return 26;
         if ((active0 & 0xf433c640000000L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 11;
            return 26;
         }
         return -1;
      case 12:
         if ((active0 & 0x10200000000000L) != 0L)
            return 26;
         if ((active0 & 0xe413c640000000L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 12;
            return 26;
         }
         return -1;
      case 13:
         if ((active0 & 0x4000000000L) != 0L)
            return 26;
         if ((active0 & 0xe4138640000000L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 13;
            return 26;
         }
         return -1;
      case 14:
         if ((active0 & 0xc0000000000000L) != 0L)
            return 26;
         if ((active0 & 0x24138640000000L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 14;
            return 26;
         }
         return -1;
      case 15:
         if ((active0 & 0x4038600000000L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 15;
            return 26;
         }
         if ((active0 & 0x20100040000000L) != 0L)
            return 26;
         return -1;
      case 16:
         if ((active0 & 0x20000000000L) != 0L)
            return 26;
         if ((active0 & 0x4018600000000L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 16;
            return 26;
         }
         return -1;
      case 17:
         if ((active0 & 0x4010200000000L) != 0L)
            return 26;
         if ((active0 & 0x8400000000L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 17;
            return 26;
         }
         return -1;
      case 18:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 18;
            return 26;
         }
         if ((active0 & 0x400000000L) != 0L)
            return 26;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStartNfaWithStates_0(0, 5, 70);
      case 33:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000000L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 7);
      case 41:
         return jjStopAtPos(0, 8);
      case 42:
         return jjStopAtPos(0, 25);
      case 43:
         return jjStopAtPos(0, 27);
      case 44:
         return jjStopAtPos(0, 14);
      case 45:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1L);
      case 46:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L, 0x0L);
      case 47:
         return jjStopAtPos(0, 26);
      case 58:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x400000000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 13);
      case 60:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 20);
      case 62:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 23);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x24203d060000000L, 0x0L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x84300100000000L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x1000000080000000L, 0x0L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x400040000000000L, 0x0L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x801800200000000L, 0x0L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x30002400000000L, 0x0L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x108000000000000L, 0x0L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 11);
      case 93:
         return jjStopAtPos(0, 12);
      case 95:
         return jjStartNfaWithStates_0(0, 19, 26);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc000000002000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8690000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x400000c0400cL, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x5020001L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x120000008000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100002002000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000102L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x20c00000c0000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c00L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1020000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200004840010020L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xd1000000000240L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x300000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x210000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000008000080L, 0x0L);
      case 123:
         return jjStopAtPos(0, 9);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 10);
      default :
         return jjMoveNfa_0(7, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         break;
      case 46:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      case 58:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         break;
      case 61:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 124);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 125);
         break;
      case 62:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         break;
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000000000L, active1, 0L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x18c300100000000L, active1, 0L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x42000080000000L, active1, 0L, active2, 0L);
      case 78:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1001801a00000000L, active1, 0L, active2, 0L);
      case 79:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 43, 26);
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 82:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 37, 26);
         return jjMoveStringLiteralDfa2_0(active0, 0x7c060000000L, active1, 0L, active2, 0L);
      case 83:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 57, 26);
         break;
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x180800000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x224042001040L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1d3003218004280L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1c0400200800L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000102L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000000000L, active1, 0x4088204d0418L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2c010001000020L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000001L, active2, 0L);
      case 124:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 127);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x3c060000000L, active1, 0L);
      case 68:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 26);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0x84300100000000L, active1, 0L);
      case 73:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 26);
         break;
      case 76:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x38000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800400000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000200L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0xc0000000000000L);
      case 100:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 74, 26);
         break;
      case 102:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 65, 26);
         break;
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000c0000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x202008080040b0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20001000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000002000000L);
      case 110:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 26);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 85, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x2400400000008L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0xa000028004L);
      case 112:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x84000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc100260100000L);
      case 115:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 26);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 86, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8c4000000000L);
      case 116:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 120, 26);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 121, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000140L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10100800000L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L);
      case 120:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 76, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x184300100000000L, active1, 0L);
      case 69:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa4_0(active0, 0x3c060000000L, active1, 0L);
      case 77:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x470000000000000L, active1, 0x1000000000L);
      case 97:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0xc000081000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x404000000000L);
      case 100:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 26);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 26);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 116, 26);
         break;
      case 101:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 26);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 26);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 104, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800040010100L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000080L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L);
      case 108:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 26);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 26);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 109, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2022000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x300800000L);
      case 111:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xc1000404008000L);
      case 112:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 26);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0x120800000000L);
      case 116:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 26);
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20080000000000L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 48:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 83, 26);
         break;
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x3003c060000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x9800000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0x84300100000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0x80000000000L);
      case 97:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 89, 26);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x404020000000L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L);
      case 101:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 105, 26);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 117, 26);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xa000020000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100800000L);
      case 108:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 26);
         break;
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x5000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000L);
      case 114:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 79, 26);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 26);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc0800080000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000L);
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 26);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 26);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000040000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000000L);
      case 121:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 26);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000100000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x30800000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x480000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x8433c260000000L, active1, 0x8000000000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000L);
      case 100:
         if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000000L);
      case 101:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 26);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 112, 26);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x84000100L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100800000L);
      case 103:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 26);
         break;
      case 104:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 113, 26);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1400000000L);
      case 108:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 26);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 102, 26);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000L);
      case 111:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 94, 26);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000L);
      case 114:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 26);
         break;
      case 116:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 26);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 110, 26);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 111, 26);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x820000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x9000000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x8040000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x10200000000L, active1, 0L);
      case 76:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 26);
         break;
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x84000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x30004020000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0x80000000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000L);
      case 108:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 26);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000L);
      case 110:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 99, 26);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 103, 26);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1004000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80100800000L);
      case 114:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 26);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0xf4000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x200400000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x808040000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x10200000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L, active1, 0L);
      case 82:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 26);
         break;
      case 84:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 51, 26);
         return jjMoveStringLiteralDfa8_0(active0, 0x1020000000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000L);
      case 108:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 98, 26);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000000L);
      case 111:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 95, 26);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8001000000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100800000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 26);
         return jjMoveStringLiteralDfa9_0(active0, 0x8040000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000400000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0x4020000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x70100000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 47, 26);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x30200000000L, active1, 0L);
      case 99:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 101, 26);
         break;
      case 105:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 97, 26);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000L);
      case 109:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 87, 26);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 96, 26);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000000000L);
      case 115:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 107, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0xa0020000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 29, 26);
         return jjMoveStringLiteralDfa10_0(active0, 0x10200000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x300000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa10_0(active0, 0x8040000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x1004000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000400000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000000000L);
      case 115:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 115, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x50100000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa11_0(active0, 0x20020000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa11_0(active0, 0x1200000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa11_0(active0, 0x4010200000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x8040000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000000000L);
      case 108:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(10, 90, 26);
         break;
      case 115:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 119, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0x10200000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x84008000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000L, active1, 0L);
      case 83:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 48, 26);
         break;
      case 84:
         return jjMoveStringLiteralDfa12_0(active0, 0x20100040000000L, active1, 0L);
      case 108:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 100, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000L);
      case 67:
         return jjMoveStringLiteralDfa13_0(active0, 0x4010200000000L);
      case 71:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000L);
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0x20100000000000L);
      case 76:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000000L);
      case 77:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000L);
      case 78:
         return jjMoveStringLiteralDfa13_0(active0, 0x80008000000000L);
      case 83:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 45, 26);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 52, 26);
         break;
      case 89:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L);
      case 69:
         return jjMoveStringLiteralDfa14_0(active0, 0x40020000000000L);
      case 71:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000000L);
      case 79:
         return jjMoveStringLiteralDfa14_0(active0, 0x20100000000000L);
      case 80:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L);
      case 83:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000L);
      case 84:
         return jjMoveStringLiteralDfa14_0(active0, 0x4010200000000L);
      case 89:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 38, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000L);
      case 73:
         return jjMoveStringLiteralDfa15_0(active0, 0x4010200000000L);
      case 78:
         return jjMoveStringLiteralDfa15_0(active0, 0x20120000000000L);
      case 83:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 54, 26);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 55, 26);
         break;
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x8400000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000000L);
      case 73:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000L);
      case 79:
         return jjMoveStringLiteralDfa16_0(active0, 0x4010200000000L);
      case 83:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(15, 30, 26);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 44, 26);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 53, 26);
         break;
      case 84:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa17_0(active0, 0x4018200000000L);
      case 79:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000L);
      case 83:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 41, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000000000L);
      case 78:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000000L);
      case 83:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(17, 33, 26);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 40, 26);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 50, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa19_0(active0, 0x8000000000L);
      case 83:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(18, 34, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 39, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 70;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 13);
                  else if (curChar == 34)
                     jjCheckNAddStates(14, 16);
                  else if (curChar == 39)
                     jjAddStates(17, 18);
                  else if (curChar == 37)
                     jjCheckNAddStates(19, 21);
                  else if (curChar == 10)
                     jjCheckNAddTwoStates(0, 1);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 129)
                        kind = 129;
                     jjCheckNAddStates(22, 25);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 129)
                        kind = 129;
                     jjCheckNAddStates(26, 31);
                  }
                  break;
               case 70:
                  if (curChar == 37)
                     jjCheckNAddStates(19, 21);
                  else if (curChar == 10)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 0:
                  if (curChar == 10)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 37)
                     jjCheckNAddStates(19, 21);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 3:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(4);
                  break;
               case 4:
               case 5:
                  if (curChar != 10)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(4);
                  break;
               case 6:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if (curChar == 39 && kind > 136)
                     kind = 136;
                  break;
               case 11:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(13, 9);
                  break;
               case 13:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 14:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 16:
                  if (curChar == 34)
                     jjCheckNAddStates(14, 16);
                  break;
               case 17:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 19:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 20:
                  if (curChar == 34 && kind > 137)
                     kind = 137;
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(32, 35);
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 23:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 27:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAddStates(22, 25);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjCheckNAddTwoStates(30, 31);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 13);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 35:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAddTwoStates(41, 37);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar == 46)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAddStates(39, 41);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAddTwoStates(47, 37);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar == 46)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAddStates(42, 44);
                  break;
               case 52:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAddTwoStates(53, 54);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAddTwoStates(58, 54);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(45, 47);
                  break;
               case 61:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(62, 54);
                  break;
               case 63:
                  if (curChar != 48)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAddStates(26, 31);
                  break;
               case 64:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAddTwoStates(64, 29);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAddTwoStates(66, 29);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjCheckNAddTwoStates(68, 31);
                  break;
               case 69:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjCheckNAddTwoStates(69, 31);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
               case 26:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  jjCheckNAdd(26);
                  break;
               case 2:
                  jjAddStates(19, 21);
                  break;
               case 8:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 10:
                  if (curChar == 92)
                     jjAddStates(48, 50);
                  break;
               case 11:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 18:
                  if (curChar == 92)
                     jjAddStates(51, 53);
                  break;
               case 19:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 29:
                  if ((0x100000001000L & l) != 0L && kind > 129)
                     kind = 129;
                  break;
               case 31:
                  if ((0x100000001000L & l) != 0L && kind > 130)
                     kind = 130;
                  break;
               case 34:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(54, 55);
                  break;
               case 37:
                  if ((0x5000000050L & l) != 0L && kind > 129)
                     kind = 129;
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               case 51:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(60, 61);
                  break;
               case 54:
                  if ((0x5000000050L & l) != 0L && kind > 134)
                     kind = 134;
                  break;
               case 56:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(62, 63);
                  break;
               case 60:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(64, 65);
                  break;
               case 65:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 66:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAddTwoStates(66, 29);
                  break;
               case 67:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(68);
                  break;
               case 68:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjCheckNAddTwoStates(68, 31);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
               case 26:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 138)
                     kind = 138;
                  jjCheckNAdd(26);
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(19, 21);
                  break;
               case 8:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 17:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(14, 16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 70 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   33, 34, 37, 38, 39, 42, 43, 48, 49, 55, 56, 59, 60, 54, 17, 18, 
   20, 8, 10, 2, 3, 6, 28, 29, 30, 31, 64, 29, 65, 67, 69, 31, 
   17, 18, 22, 20, 33, 34, 37, 44, 45, 37, 50, 51, 54, 59, 60, 54, 
   11, 12, 14, 19, 21, 23, 35, 36, 40, 41, 46, 47, 52, 53, 57, 58, 
   61, 62, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\50", "\51", "\173", "\175", "\133", 
"\135", "\73", "\54", "\56", "\72", "\72\72", "\56\56", "\137", "\75", "\74", "\76", 
"\77", "\41", "\52", "\57", "\53", "\55", "\101\122\103\110\111\137\124\131\120\105", 
"\101\122\103\110\111\137\105\114\105\115\137\124\131\120\105\123", "\105\114\105\115\137\124\131\120\105", "\102\105\110\101\126\111\117\122", 
"\111\116\120\125\124\137\111\116\124\105\122\101\103\124\111\117\116\123", 
"\117\125\124\120\125\124\137\111\116\124\105\122\101\103\124\111\117\116\123", "\125\116\111", "\101\116\104", "\117\122", 
"\101\122\103\110\111\137\124\117\120\117\114\117\107\131", 
"\101\122\103\110\111\137\105\114\105\115\137\111\116\123\124\101\116\103\105\123", "\101\122\103\110\111\137\111\116\124\105\122\101\103\124\111\117\116\123", 
"\101\122\103\110\111\137\101\124\124\101\103\110\115\105\116\124\123", "\106\122\117\115", "\124\117", 
"\102\105\110\101\126\137\126\101\122\111\101\124\111\117\116\123", "\102\105\110\101\126\137\110\111\104\111\116\107\123", "\110\111\104\105", 
"\111\116\124\105\122\116\101\114\123", "\111\116\124\105\122\101\103\124\111\117\116\123", "\101\114\114", 
"\102\105\110\101\126\137\122\105\123\124\122\111\103\124\111\117\116\123", "\122\105\123\124\122\111\103\124", 
"\117\102\123\137\111\116\124\105\122\116\101\114\123", "\117\102\123\137\111\116\124\105\122\101\103\124\111\117\116\123", 
"\101\114\114\137\117\102\123\105\122\126\101\102\114\105\123", "\102\105\110\101\126\137\122\105\116\101\115\111\116\107\123", 
"\122\105\116\101\115\105", "\101\123", "\106\117\122\137\101\114\114", "\111\116", "\105\116\104", 
"\143\157\156\163\164", "\154\157\143\141\154", "\163\164\157\160", "\145\170\160", "\151\156\146", 
"\143\150\157\151\143\145", "\143\157\156\144", "\166\157\151\144", "\160\162\151\157", 
"\162\141\164\145", "\167\145\151\147\150\164", "\151\156\164\145\147\145\162", 
"\162\145\141\154", "\155\157\144", "\155\151\156", "\155\141\170", "\141\142\163", 
"\143\145\151\154", "\146\154\157\157\162", "\160\157\167\145\162", "\145\160\157\167\145\162", 
"\154\157\147\145", "\154\157\147\61\60", "\163\161\162\164", "\163\151\156", "\143\157\163", 
"\143\137\165\156\151\146\157\162\155", "\145\162\154\141\156\147", "\147\141\155\155\141", 
"\145\170\160\157\156\145\156\164\151\141\154", "\167\145\151\142\165\154\154", "\142\145\164\141", 
"\156\157\162\155\141\154", "\160\141\162\145\164\157", "\142\137\160\141\162\145\164\157", 
"\144\137\165\156\151\146\157\162\155", "\142\145\162\156\157\165\154\154\151", "\142\151\156\157\155\151\141\154", 
"\160\157\151\163\163\157\156", "\156\145\147\137\142\151\156\157\155\151\141\154", 
"\147\145\157\155\145\164\162\151\143", "\160\141\163\143\141\154", "\142\157\157\154\145\141\156", 
"\164\162\165\145", "\146\141\154\163\145", "\154\151\163\164", 
"\154\151\163\164\137\143\157\156\163", "\146\151\162\163\164", "\164\141\151\154", "\143\157\156\143\141\164", 
"\151\156\163\145\162\164", "\162\145\155\157\166\145", "\154\145\156\147\164\150", 
"\141\162\162\141\171", "\141\162\162\141\171\137\143\157\156\163", "\162\145\141\144", 
"\167\162\151\164\145", "\162\145\143\157\162\144", "\162\145\143\157\162\144\137\143\157\156\163", 
"\147\145\164", "\160\165\164", "\72\75", "\41\75", "\74\75", "\76\75", "\46\46", "\174\174", 
"\55\76", null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0xffffffffffffffffL, 0x747L, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[70];
private final int[] jjstateSet = new int[140];
protected char curChar;
/** Constructor. */
public AEMparserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public AEMparserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 70; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
