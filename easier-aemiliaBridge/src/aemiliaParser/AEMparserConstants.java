/* Generated By:JavaCC: Do not edit this line. AEMparserConstants.java */
package aemiliaParser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AEMparserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LPAREN = 7;
  /** RegularExpression Id. */
  int RPAREN = 8;
  /** RegularExpression Id. */
  int LBRACE = 9;
  /** RegularExpression Id. */
  int RBRACE = 10;
  /** RegularExpression Id. */
  int LBRACKET = 11;
  /** RegularExpression Id. */
  int RBRACKET = 12;
  /** RegularExpression Id. */
  int SEMICOLON = 13;
  /** RegularExpression Id. */
  int COMMA = 14;
  /** RegularExpression Id. */
  int DOT = 15;
  /** RegularExpression Id. */
  int COLON = 16;
  /** RegularExpression Id. */
  int DOUBLE_COLON = 17;
  /** RegularExpression Id. */
  int DOTDOT = 18;
  /** RegularExpression Id. */
  int UNDERSCORE = 19;
  /** RegularExpression Id. */
  int EQUAL = 20;
  /** RegularExpression Id. */
  int LESS = 21;
  /** RegularExpression Id. */
  int GREATER = 22;
  /** RegularExpression Id. */
  int QUESTION = 23;
  /** RegularExpression Id. */
  int EXCLAMATION = 24;
  /** RegularExpression Id. */
  int MULTIPLICATION = 25;
  /** RegularExpression Id. */
  int DIVISION = 26;
  /** RegularExpression Id. */
  int ADDITION = 27;
  /** RegularExpression Id. */
  int SUBTRACTION = 28;
  /** RegularExpression Id. */
  int T_ARCHITECTURAL_TYPE = 29;
  /** RegularExpression Id. */
  int T_ARCHI_ELEM_TYPES = 30;
  /** RegularExpression Id. */
  int T_ELEM_TYPE = 31;
  /** RegularExpression Id. */
  int T_BEHAVIOR = 32;
  /** RegularExpression Id. */
  int T_INPUT_INTERACTIONS = 33;
  /** RegularExpression Id. */
  int T_OUTPUT_INTERACTIONS = 34;
  /** RegularExpression Id. */
  int T_UNI = 35;
  /** RegularExpression Id. */
  int T_AND = 36;
  /** RegularExpression Id. */
  int T_OR = 37;
  /** RegularExpression Id. */
  int T_ARCHI_TOPOLOGY = 38;
  /** RegularExpression Id. */
  int T_ARCHI_ELEM_INSTANCES = 39;
  /** RegularExpression Id. */
  int T_ARCHI_INTERACTIONS = 40;
  /** RegularExpression Id. */
  int T_ARCHI_ATTACHMENTS = 41;
  /** RegularExpression Id. */
  int T_FROM = 42;
  /** RegularExpression Id. */
  int T_TO = 43;
  /** RegularExpression Id. */
  int T_BEHAV_VARIATIONS = 44;
  /** RegularExpression Id. */
  int T_BEHAV_HIDINGS = 45;
  /** RegularExpression Id. */
  int T_HIDE = 46;
  /** RegularExpression Id. */
  int T_INTERNALS = 47;
  /** RegularExpression Id. */
  int T_INTERACTIONS = 48;
  /** RegularExpression Id. */
  int T_ALL = 49;
  /** RegularExpression Id. */
  int T_BEHAV_RESTRICTIONS = 50;
  /** RegularExpression Id. */
  int T_RESTRICT = 51;
  /** RegularExpression Id. */
  int T_OBS_INTERNALS = 52;
  /** RegularExpression Id. */
  int T_OBS_INTERACTIONS = 53;
  /** RegularExpression Id. */
  int T_ALL_OBSERVABLES = 54;
  /** RegularExpression Id. */
  int T_BEHAV_RENAMINGS = 55;
  /** RegularExpression Id. */
  int T_RENAME = 56;
  /** RegularExpression Id. */
  int T_AS = 57;
  /** RegularExpression Id. */
  int T_FOR_ALL = 58;
  /** RegularExpression Id. */
  int T_IN = 59;
  /** RegularExpression Id. */
  int T_END = 60;
  /** RegularExpression Id. */
  int T_CONST = 61;
  /** RegularExpression Id. */
  int T_LOCAL = 62;
  /** RegularExpression Id. */
  int T_STOP = 63;
  /** RegularExpression Id. */
  int T_EXP = 64;
  /** RegularExpression Id. */
  int T_INF = 65;
  /** RegularExpression Id. */
  int T_CHOICE = 66;
  /** RegularExpression Id. */
  int T_COND = 67;
  /** RegularExpression Id. */
  int T_VOID = 68;
  /** RegularExpression Id. */
  int T_PRIO = 69;
  /** RegularExpression Id. */
  int T_RATE = 70;
  /** RegularExpression Id. */
  int T_WEIGHT = 71;
  /** RegularExpression Id. */
  int T_INTEGER = 72;
  /** RegularExpression Id. */
  int T_REAL = 73;
  /** RegularExpression Id. */
  int T_MOD = 74;
  /** RegularExpression Id. */
  int T_MIN = 75;
  /** RegularExpression Id. */
  int T_MAX = 76;
  /** RegularExpression Id. */
  int T_ABS = 77;
  /** RegularExpression Id. */
  int T_CEIL = 78;
  /** RegularExpression Id. */
  int T_FLOOR = 79;
  /** RegularExpression Id. */
  int T_POWER = 80;
  /** RegularExpression Id. */
  int T_EPOWER = 81;
  /** RegularExpression Id. */
  int T_LOGE = 82;
  /** RegularExpression Id. */
  int T_LOG10 = 83;
  /** RegularExpression Id. */
  int T_SQRT = 84;
  /** RegularExpression Id. */
  int T_SIN = 85;
  /** RegularExpression Id. */
  int T_COS = 86;
  /** RegularExpression Id. */
  int T_C_UNIFORM = 87;
  /** RegularExpression Id. */
  int T_ERLANG = 88;
  /** RegularExpression Id. */
  int T_GAMMA = 89;
  /** RegularExpression Id. */
  int T_EXPONENTIAL = 90;
  /** RegularExpression Id. */
  int T_WEIBULL = 91;
  /** RegularExpression Id. */
  int T_BETA = 92;
  /** RegularExpression Id. */
  int T_NORMAL = 93;
  /** RegularExpression Id. */
  int T_PARETO = 94;
  /** RegularExpression Id. */
  int T_B_PARETO = 95;
  /** RegularExpression Id. */
  int T_D_UNIFORM = 96;
  /** RegularExpression Id. */
  int T_BERNOULLI = 97;
  /** RegularExpression Id. */
  int T_BINOMIAL = 98;
  /** RegularExpression Id. */
  int T_POISSON = 99;
  /** RegularExpression Id. */
  int T_NEG_BINOMIAL = 100;
  /** RegularExpression Id. */
  int T_GEOMETRIC = 101;
  /** RegularExpression Id. */
  int T_PASCAL = 102;
  /** RegularExpression Id. */
  int T_BOOLEAN = 103;
  /** RegularExpression Id. */
  int T_TRUE = 104;
  /** RegularExpression Id. */
  int T_FALSE = 105;
  /** RegularExpression Id. */
  int T_LIST = 106;
  /** RegularExpression Id. */
  int T_LIST_CONS = 107;
  /** RegularExpression Id. */
  int T_FIRST = 108;
  /** RegularExpression Id. */
  int T_TAIL = 109;
  /** RegularExpression Id. */
  int T_CONCAT = 110;
  /** RegularExpression Id. */
  int T_INSERT = 111;
  /** RegularExpression Id. */
  int T_REMOVE = 112;
  /** RegularExpression Id. */
  int T_LENGTH = 113;
  /** RegularExpression Id. */
  int T_ARRAY = 114;
  /** RegularExpression Id. */
  int T_ARRAY_CONS = 115;
  /** RegularExpression Id. */
  int T_READ = 116;
  /** RegularExpression Id. */
  int T_WRITE = 117;
  /** RegularExpression Id. */
  int T_RECORD = 118;
  /** RegularExpression Id. */
  int T_RECORD_CONS = 119;
  /** RegularExpression Id. */
  int T_GET = 120;
  /** RegularExpression Id. */
  int T_PUT = 121;
  /** RegularExpression Id. */
  int ASSIGN = 122;
  /** RegularExpression Id. */
  int NE = 123;
  /** RegularExpression Id. */
  int LE = 124;
  /** RegularExpression Id. */
  int GE = 125;
  /** RegularExpression Id. */
  int AND = 126;
  /** RegularExpression Id. */
  int OR = 127;
  /** RegularExpression Id. */
  int IMPL = 128;
  /** RegularExpression Id. */
  int T_NUMBER = 129;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 130;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 131;
  /** RegularExpression Id. */
  int HEX_LITERAL = 132;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 133;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 134;
  /** RegularExpression Id. */
  int EXPONENT = 135;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 136;
  /** RegularExpression Id. */
  int STRING_LITERAL = 137;
  /** RegularExpression Id. */
  int T_ID = 138;
  /** RegularExpression Id. */
  int LETTER = 139;
  /** RegularExpression Id. */
  int DIGIT = 140;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"\\n\"",
    "<token of kind 6>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\":\"",
    "\"::\"",
    "\"..\"",
    "\"_\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"?\"",
    "\"!\"",
    "\"*\"",
    "\"/\"",
    "\"+\"",
    "\"-\"",
    "\"ARCHI_TYPE\"",
    "\"ARCHI_ELEM_TYPES\"",
    "\"ELEM_TYPE\"",
    "\"BEHAVIOR\"",
    "\"INPUT_INTERACTIONS\"",
    "\"OUTPUT_INTERACTIONS\"",
    "\"UNI\"",
    "\"AND\"",
    "\"OR\"",
    "\"ARCHI_TOPOLOGY\"",
    "\"ARCHI_ELEM_INSTANCES\"",
    "\"ARCHI_INTERACTIONS\"",
    "\"ARCHI_ATTACHMENTS\"",
    "\"FROM\"",
    "\"TO\"",
    "\"BEHAV_VARIATIONS\"",
    "\"BEHAV_HIDINGS\"",
    "\"HIDE\"",
    "\"INTERNALS\"",
    "\"INTERACTIONS\"",
    "\"ALL\"",
    "\"BEHAV_RESTRICTIONS\"",
    "\"RESTRICT\"",
    "\"OBS_INTERNALS\"",
    "\"OBS_INTERACTIONS\"",
    "\"ALL_OBSERVABLES\"",
    "\"BEHAV_RENAMINGS\"",
    "\"RENAME\"",
    "\"AS\"",
    "\"FOR_ALL\"",
    "\"IN\"",
    "\"END\"",
    "\"const\"",
    "\"local\"",
    "\"stop\"",
    "\"exp\"",
    "\"inf\"",
    "\"choice\"",
    "\"cond\"",
    "\"void\"",
    "\"prio\"",
    "\"rate\"",
    "\"weight\"",
    "\"integer\"",
    "\"real\"",
    "\"mod\"",
    "\"min\"",
    "\"max\"",
    "\"abs\"",
    "\"ceil\"",
    "\"floor\"",
    "\"power\"",
    "\"epower\"",
    "\"loge\"",
    "\"log10\"",
    "\"sqrt\"",
    "\"sin\"",
    "\"cos\"",
    "\"c_uniform\"",
    "\"erlang\"",
    "\"gamma\"",
    "\"exponential\"",
    "\"weibull\"",
    "\"beta\"",
    "\"normal\"",
    "\"pareto\"",
    "\"b_pareto\"",
    "\"d_uniform\"",
    "\"bernoulli\"",
    "\"binomial\"",
    "\"poisson\"",
    "\"neg_binomial\"",
    "\"geometric\"",
    "\"pascal\"",
    "\"boolean\"",
    "\"true\"",
    "\"false\"",
    "\"list\"",
    "\"list_cons\"",
    "\"first\"",
    "\"tail\"",
    "\"concat\"",
    "\"insert\"",
    "\"remove\"",
    "\"length\"",
    "\"array\"",
    "\"array_cons\"",
    "\"read\"",
    "\"write\"",
    "\"record\"",
    "\"record_cons\"",
    "\"get\"",
    "\"put\"",
    "\":=\"",
    "\"!=\"",
    "\"<=\"",
    "\">=\"",
    "\"&&\"",
    "\"||\"",
    "\"->\"",
    "<T_NUMBER>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<T_ID>",
    "<LETTER>",
    "<DIGIT>",
  };

}
