/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package metamodel.mmaemilia.Headers.provider;

import java.util.ArrayList;
import java.util.Collection;

import metamodel.mmaemilia.Headers.util.HeadersAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class HeadersItemProviderAdapterFactory extends HeadersAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public HeadersItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.mmaemilia.Headers.AT_Header} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AT_HeaderItemProvider aT_HeaderItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.mmaemilia.Headers.AT_Header}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAT_HeaderAdapter() {
		if (aT_HeaderItemProvider == null) {
			aT_HeaderItemProvider = new AT_HeaderItemProvider(this);
		}

		return aT_HeaderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.mmaemilia.Headers.ConstInit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstInitItemProvider constInitItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.mmaemilia.Headers.ConstInit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstInitAdapter() {
		if (constInitItemProvider == null) {
			constInitItemProvider = new ConstInitItemProvider(this);
		}

		return constInitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.mmaemilia.Headers.ET_Header} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ET_HeaderItemProvider eT_HeaderItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.mmaemilia.Headers.ET_Header}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createET_HeaderAdapter() {
		if (eT_HeaderItemProvider == null) {
			eT_HeaderItemProvider = new ET_HeaderItemProvider(this);
		}

		return eT_HeaderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.mmaemilia.Headers.Const} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstItemProvider constItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.mmaemilia.Headers.Const}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstAdapter() {
		if (constItemProvider == null) {
			constItemProvider = new ConstItemProvider(this);
		}

		return constItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.mmaemilia.Headers.BehavHeader} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BehavHeaderItemProvider behavHeaderItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.mmaemilia.Headers.BehavHeader}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBehavHeaderAdapter() {
		if (behavHeaderItemProvider == null) {
			behavHeaderItemProvider = new BehavHeaderItemProvider(this);
		}

		return behavHeaderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.mmaemilia.Headers.LeftSide} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeftSideItemProvider leftSideItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.mmaemilia.Headers.LeftSide}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeftSideAdapter() {
		if (leftSideItemProvider == null) {
			leftSideItemProvider = new LeftSideItemProvider(this);
		}

		return leftSideItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.mmaemilia.Headers.RightSide} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RightSideItemProvider rightSideItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.mmaemilia.Headers.RightSide}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRightSideAdapter() {
		if (rightSideItemProvider == null) {
			rightSideItemProvider = new RightSideItemProvider(this);
		}

		return rightSideItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.mmaemilia.Headers.VarInit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VarInitItemProvider varInitItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.mmaemilia.Headers.VarInit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVarInitAdapter() {
		if (varInitItemProvider == null) {
			varInitItemProvider = new VarInitItemProvider(this);
		}

		return varInitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.mmaemilia.Headers.Var} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VarItemProvider varItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.mmaemilia.Headers.Var}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVarAdapter() {
		if (varItemProvider == null) {
			varItemProvider = new VarItemProvider(this);
		}

		return varItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.mmaemilia.Headers.Local} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalItemProvider localItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.mmaemilia.Headers.Local}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalAdapter() {
		if (localItemProvider == null) {
			localItemProvider = new LocalItemProvider(this);
		}

		return localItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (aT_HeaderItemProvider != null) aT_HeaderItemProvider.dispose();
		if (constInitItemProvider != null) constInitItemProvider.dispose();
		if (eT_HeaderItemProvider != null) eT_HeaderItemProvider.dispose();
		if (constItemProvider != null) constItemProvider.dispose();
		if (behavHeaderItemProvider != null) behavHeaderItemProvider.dispose();
		if (leftSideItemProvider != null) leftSideItemProvider.dispose();
		if (rightSideItemProvider != null) rightSideItemProvider.dispose();
		if (varInitItemProvider != null) varInitItemProvider.dispose();
		if (varItemProvider != null) varItemProvider.dispose();
		if (localItemProvider != null) localItemProvider.dispose();
	}

}
