%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 					     
% Passenger checks in
%					     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Beginning of the model, here we initialize the rates that we will use later

ARCHI_TYPE BoA_CheckIn(const integer SubS_buffer_size := 1, 	%since there's only a card reader we only need a buffer of dimension 1
const rate lambda := 1, 						%this is the rate at which the jobs enter the system
const rate TG_CS_communication_rate := 0.6666, 			%rate at which the jobs are sent and the time they spend at the Central Station
const rate BMMS_TG_rate := 4.5, 					%communication rate between the BusMainSubSystem and the 3GNetwork
const rate CR_BMSS_rate := 4.5) 					%communication rate between the Card Reader and the BusMainSubSystem

%here we declare the types that will be used in the model and their behavior
ARCHI_ELEM_TYPES
	
	%this type represent the CardReader, it has only one behavior in which it either sends an id or receives a response for the passenger
	ELEM_TYPE Card_Reader(const rate lambda,const rate CR_BMSS_rate)	
	
		BEHAVIOR
			CheckIn(void;void) = choice{
						<give_identification, exp(lambda)>.CheckIn(),
					     	<get_response,exp(CR_BMSS_rate)>.CheckIn()
						%this type produces and sends an id at a rate lambda
						%its communication rate for the incoming response is CR_BMSS_rate
			}
		INPUT_INTERACTIONS
			UNI get_response
		OUTPUT_INTERACTIONS
			UNI give_identification


	ELEM_TYPE Bus_MainSubSystem(const integer SubS_buffer_size,const rate BMMS_TG_rate)	
		%this type too has only a behavior but has more choices inside it
		BEHAVIOR %it has an integer, customer_num as input parameter, this is used to track the number of jobs inside the buffer
			InternalBuffer(integer(0..SubS_buffer_size) customer_num := 0;void) =
		choice
		{
		  %not every choice has the same probability to be executed, for some of them a condition must be met
		  
		  cond(customer_num < SubS_buffer_size) -> <receive_identification, _> . InternalBuffer(customer_num + 1),

		  %for example an id can be forwarded only if there's some in the buffer, customer_num>0
		  cond(customer_num > 0) -> 	<forward_id, _> . InternalBuffer(customer_num),
                  <communicate_buffer_state!(customer_num), inf> . InternalBuffer(customer_num),
		  cond(customer_num > 0) -> <receive_response,exp(BMMS_TG_rate)>.<give_response,_>.InternalBuffer(customer_num - 1)
		  %this piece of code can: receive an id, forward an id, communicate the state of the buffer or forward the response to the card 			  reader
		}

		INPUT_INTERACTIONS
			UNI receive_response
			OR  receive_identification
		OUTPUT_INTERACTIONS
			UNI  forward_id;
			     give_response;
			     communicate_buffer_state
			

	ELEM_TYPE ThreeG_Network(const integer SubS_buffer_size,
			      const rate TG_CS_communication_rate,const rate BMMS_TG_rate)	
		BEHAVIOR
			ThreeG_sender(void;local integer(0..SubS_buffer_size) customer_num) =
                		<receive_packet, exp(BMMS_TG_rate)> . 
				<read_buffer_state?(customer_num), _> .
				<checkInfo, exp(TG_CS_communication_rate * (customer_num + 1))>.<send_response_packet,_>.ThreeG_sender()
			%this behavior has only an operation, it receives the packet from the BMSS, reads the buffer state, then checks with the
			%station if the passenger can get on the bus and then sends the response packet to the BMSS

		INPUT_INTERACTIONS
			UNI receive_packet;
		 	    read_buffer_state
		OUTPUT_INTERACTIONS
			UNI send_response_packet

ARCHI_TOPOLOGY

	%the system consists of three instances a CARDREADER, a BUSMAINSUBSYSTEM and a 3GNETWORK
	ARCHI_ELEM_INSTANCES
		CR : Card_Reader(lambda,CR_BMSS_rate);
		BMSS : Bus_MainSubSystem(SubS_buffer_size,BMMS_TG_rate);
		TG : ThreeG_Network(SubS_buffer_size,TG_CS_communication_rate,BMMS_TG_rate)	

	ARCHI_INTERACTIONS
		void

	ARCHI_ATTACHMENTS
		
		%CARDREADER to BUSMAINSUBSYSTEM
		FROM CR.give_identification TO BMSS.receive_identification;

		%BUSMAINSUBSYSTEM to CARDREADER
		FROM BMSS.give_response TO CR.get_response;

		%BUSMAINSUBSYSTEM to 3GNETWORK
		FROM BMSS.forward_id TO TG.receive_packet;

		%BUSMAINSUBSYSTEM to 3GNETWORK
		FROM BMSS.communicate_buffer_state TO TG.read_buffer_state;

		%3GNETWORK to BUSMAINSUBSYSTEM
		FROM TG.send_response_packet TO BMSS.receive_response

END
