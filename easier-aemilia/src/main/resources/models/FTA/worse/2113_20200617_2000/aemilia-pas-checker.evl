import "/home/peo/git/sealab/easier/easier-epsilon/src/main/resources/evl/library/action_process.eol";
import "/home/peo/git/sealab/easier/easier-epsilon/src/main/resources/evl/library/action.eol";
import "/home/peo/git/sealab/easier/easier-epsilon/src/main/resources/evl/library/archi_elem_instance.eol";
import "/home/peo/git/sealab/easier/easier-epsilon/src/main/resources/evl/library/architectural_interaction.eol";
import "/home/peo/git/sealab/easier/easier-epsilon/src/main/resources/evl/library/attachment.eol";
import "/home/peo/git/sealab/easier/easier-epsilon/src/main/resources/evl/library/const_init.eol";
import "/home/peo/git/sealab/easier/easier-epsilon/src/main/resources/evl/library/elem_type.eol";
import "/home/peo/git/sealab/easier/easier-epsilon/src/main/resources/evl/library/HELPER.eol";
import "/home/peo/git/sealab/easier/easier-epsilon/src/main/resources/evl/library/metric_functions.eol";
import "thresholds.eol";


/*********************************************************************************************
 *																							 *
 *	 								Pipe and Filter 										 *
 *							Antipattern Detection and Validation					 		 *
 *										reviewed											 *
 *********************************************************************************************/
 
 
context ArchitecturalInteraction {
	critique PaF {
		check: not (self.isServiceExpOrInf() and
				self.checkOpResDemand(th_maxOpResDemand()) and
				self.F_T(th_SthReq()))
		message : "PaF on: " + self.name
		fix {
			title : "Clone"
			do {
				self.cloneArchiElemInstance(); 
			}
		}
		fix {
			title : "Delete clone"
			do {
				self.deleteDuplicatedArchiElemInstance();
			}
		}
		fix {
			title : " Change a const"
			do {
				self.changeConstant();
			}
		}
	}
	critique EP {
		check: not (self.isServiceExpOrInf() and
				self.unbalancedOpResDemand(th_maxOpResDemand().first(), th_minOpResDemand().first()) and
				self.F_RT(th_SrtReq()))
	}
}
