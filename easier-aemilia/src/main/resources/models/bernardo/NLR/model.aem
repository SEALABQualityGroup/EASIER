%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                               %
% NRL Pump - Markovian model
%                                                               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Parameters:
% - Channel capacity: 64 Kbps.
% - Data/control packet length: 512 bits.
% - Ack packet length: 49 bits.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


ARCHI_TYPE NRL_Pump_Type_M(
	const integer buffer_size     := 1,
	const rate    conn_gen_rate   := 10,      % 1 connection every 100 ms
	const rate    conn_init_rate  := 62.5,    % round-trip delay
    const rate    data_trans_rate := 125,     % trans rate / data length
	const rate    ack_trans_rate  := 1306.12, % trans rate / ack length
	const rate    ack_delay_rate  := 435.37,  % 3 acks
	const rate    timeout_rate    := 57.04,   % (1 data + 1 ack) * 2
	const weight  valid_prob      := 0.99)


ARCHI_ELEM_TYPES


	%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% Low Wrapper (LW)
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	ELEM_TYPE LW_Type(const rate conn_gen_rate,
			  const rate data_trans_rate)

	    BEHAVIOR

	      LW_Beh(void;
		     void) =
		<send_conn_request, exp(conn_gen_rate)>.
		  choice
		  {
                    <receive_conn_valid, _> . <receive_conn_grant, _> .
		      <send_msg, exp(data_trans_rate)> . <receive_low_ack, _> .
		        choice
		        {
		          <receive_conn_exit, _> . LW_Beh(),
		          <send_conn_close, exp(data_trans_rate)> . LW_Beh()
		        },
                    <receive_conn_reject, _> . LW_Beh()
		  }

	    INPUT_INTERACTIONS

	      UNI receive_conn_valid;
                  receive_conn_grant;
                  receive_conn_reject;
		  receive_low_ack;
		  receive_conn_exit

	    OUTPUT_INTERACTIONS

	      UNI send_conn_request;
                  send_msg;
		  send_conn_close


	%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% Main Thread (MT)
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	ELEM_TYPE MT_Type(const rate   data_trans_rate,
			  const weight valid_prob)

	    BEHAVIOR

	      MT_Beh(void;
		     void) =
		<receive_conn_request, _> .
      		  choice
      		  {
         	    <conn_is_valid, inf(1, valid_prob)> . <wakeup_tht, inf> .
            	      <send_conn_valid, exp(data_trans_rate)> . MT_Beh(),
         	    <conn_not_valid, inf(1, 1 - valid_prob)> .
            	      <send_conn_reject, exp(data_trans_rate)> . MT_Beh()
      		  }

	    INPUT_INTERACTIONS

	      UNI receive_conn_request

	    OUTPUT_INTERACTIONS

	      UNI wakeup_tht;
                  send_conn_valid;
                  send_conn_reject


	%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% Trusted High Thread (THT)
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	ELEM_TYPE THT_Type(const rate conn_init_rate,
			   const rate timeout_rate)

	    BEHAVIOR

	      THT_Beh(void;
		      void) =
		choice
		{
                  <receive_high_wakeup, _> . <init_high_conn, exp(conn_init_rate)> .
	            <wakeup_tlt, inf> . THT_Beh(),
                  <read_msg, _> . <forward_msg, inf> .
		    choice
		    {
      	              <receive_high_ack, _> . <delete_msg, inf> .
		        <send_ok_to_tlt, inf> . THT_Beh(),
                      <wait_for_timeout, exp(timeout_rate)> . <comm_timeout, inf> . <delete_msg, inf> .
		        <send_abort_to_tlt, inf> . THT_Beh()
		    }
		}

	    INPUT_INTERACTIONS

	      UNI receive_high_wakeup;
		  read_msg;
                  receive_high_ack

	    OUTPUT_INTERACTIONS

	      UNI wakeup_tlt;
                  forward_msg;
                  delete_msg;
		  send_ok_to_tlt;
		  comm_timeout;
                  send_abort_to_tlt

                        
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% Trusted Low Thread (TLT)
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	ELEM_TYPE TLT_Type(const rate data_trans_rate,
			   const rate ack_trans_rate,
			   const rate ack_delay_rate)

	    BEHAVIOR

	      TLT_Beh(void;
		      void) =
		<receive_low_wakeup, _> . <send_conn_grant, exp(data_trans_rate)> .
		  <receive_msg, _> . <store_msg, inf> .
		    choice
		    {
                      <wait_delay, exp(ack_delay_rate)> . <send_low_ack, exp(ack_trans_rate)> .
		        choice 
		        {
                          <receive_abort_from_tht, _> . <send_conn_exit, exp(data_trans_rate)> . TLT_Beh(),
	                  <receive_ok_from_tht, _> . <receive_conn_close, _> . TLT_Beh()
		        },
	              <receive_abort_from_tht, _> . <send_low_ack, exp(ack_trans_rate)> .
	                <send_conn_exit, exp(data_trans_rate)> . TLT_Beh(),
	              <receive_ok_from_tht, _> . <wait_delay, exp(ack_delay_rate)> .
	                <send_low_ack, exp(ack_trans_rate)> . <receive_conn_close, _> . TLT_Beh()
		    }

	    INPUT_INTERACTIONS

	      UNI receive_low_wakeup;
                  receive_msg;
		  receive_abort_from_tht;
		  receive_ok_from_tht;
		  receive_conn_close

	    OUTPUT_INTERACTIONS

	      UNI send_conn_grant;
                  store_msg;
                  send_low_ack;
		  send_conn_exit


	%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% Connection Buffer
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	ELEM_TYPE Buffer_Type(const integer buffer_size)

	    BEHAVIOR

	      Buffer_Beh(integer(0..buffer_size) msg_num := 0;
		         void) =
		choice
		{
		  cond(msg_num < buffer_size) ->
		    <accept_msg, _> . Buffer_Beh(msg_num + 1),
		  cond(msg_num > 0) ->
		    choice
		    {
                      <read_msg, inf> . Buffer_Beh(msg_num),
                      <delete_msg, _> . Buffer_Beh(msg_num - 1)
		    }
		}

	    INPUT_INTERACTIONS

	      UNI accept_msg;
                  delete_msg

	    OUTPUT_INTERACTIONS

	      UNI read_msg


	%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% High Channel (HC)
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	ELEM_TYPE HC_Type(const rate data_trans_rate,
			  const rate ack_trans_rate)

	    BEHAVIOR
 
	      HC_Beh(void;
		     void) =
		<accept_msg, _> .
		  choice
		  {
		    <receive_timeout, _> . HC_Beh(),
		    <transmit_msg, exp(data_trans_rate)> . 
		      choice 
		      {
		        <receive_timeout, _> . HC_Beh(),
			<accept_high_ack, _> .
               	          choice
                          {
                            <receive_timeout, _> . HC_Beh(),
                            <transmit_high_ack, exp(ack_trans_rate)> . HC_Beh()
                          }
		      }
		  }
      
	    INPUT_INTERACTIONS

	      UNI accept_msg;
                  receive_timeout;
		  accept_high_ack
		       
	    OUTPUT_INTERACTIONS

	      UNI transmit_msg;
		  transmit_high_ack


	%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% High Wrapper (HW)
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	ELEM_TYPE HW_Type(void)

	    BEHAVIOR

	      HW_Beh(void;
		     void) =
		<receive_msg, _> . <send_high_ack, inf> . HW_Beh()

	    INPUT_INTERACTIONS

	      UNI receive_msg

	    OUTPUT_INTERACTIONS

	      UNI send_high_ack


%%%%%%%%%%%%%%%%%%%%%%%%%%%%

ARCHI_TOPOLOGY


	ARCHI_ELEM_INSTANCES

	  LW  : LW_Type(conn_gen_rate,
			data_trans_rate);
	  MT  : MT_Type(data_trans_rate,
			valid_prob);
	  THT : THT_Type(conn_init_rate,
			 timeout_rate);
	  TLT : TLT_Type(data_trans_rate,
			 ack_trans_rate,
			 ack_delay_rate);
	  B   : Buffer_Type(buffer_size);
	  HC  : HC_Type(data_trans_rate,
			ack_trans_rate);
	  HW  : HW_Type()


	ARCHI_INTERACTIONS

	  void


	ARCHI_ATTACHMENTS

	  FROM LW.send_conn_request  TO MT.receive_conn_request;
	  FROM MT.send_conn_valid    TO LW.receive_conn_valid;
	  FROM MT.send_conn_reject   TO LW.receive_conn_reject;
	  FROM MT.wakeup_tht         TO THT.receive_high_wakeup;
	  FROM THT.wakeup_tlt        TO TLT.receive_low_wakeup;
	  FROM TLT.send_conn_grant   TO LW.receive_conn_grant;
	  FROM LW.send_msg           TO TLT.receive_msg;
	  FROM TLT.store_msg         TO B.accept_msg;
	  FROM TLT.send_low_ack      TO LW.receive_low_ack;
	  FROM B.read_msg            TO THT.read_msg;
	  FROM THT.forward_msg       TO HC.accept_msg;
	  FROM HC.transmit_msg       TO HW.receive_msg;
	  FROM THT.comm_timeout      TO HC.receive_timeout;
	  FROM HW.send_high_ack      TO HC.accept_high_ack;   
	  FROM HC.transmit_high_ack  TO THT.receive_high_ack;
	  FROM THT.delete_msg        TO B.delete_msg;
	  FROM THT.send_abort_to_tlt TO TLT.receive_abort_from_tht;
	  FROM THT.send_ok_to_tlt    TO TLT.receive_ok_from_tht;
	  FROM TLT.send_conn_exit    TO LW.receive_conn_exit;
	  FROM LW.send_conn_close    TO TLT.receive_conn_close


END
