/* Generated By:JavaCC: Do not edit this line. RewParserTokenManager.java */
package it.disim.univaq.sealab.ttep.rew;

/** Token Manager. */
public class RewParserTokenManager implements RewParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffff8ce0000000L) != 0L)
         {
            jjmatchedKind = 57;
            return 8;
         }
         if ((active0 & 0x80000L) != 0L)
            return 8;
         if ((active0 & 0x48000L) != 0L)
            return 61;
         if ((active0 & 0x20L) != 0L)
            return 62;
         return -1;
      case 1:
         if ((active0 & 0xebff8ce0000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
            return 8;
         }
         if ((active0 & 0x14000000000000L) != 0L)
            return 8;
         return -1;
      case 2:
         if ((active0 & 0xeaff8c60000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
            return 8;
         }
         if ((active0 & 0x1000080000000L) != 0L)
            return 8;
         return -1;
      case 3:
         if ((active0 & 0x20440000000L) != 0L)
            return 8;
         if ((active0 & 0xeafd8820000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 3;
            return 8;
         }
         return -1;
      case 4:
         if ((active0 & 0x400820000000L) != 0L)
            return 8;
         if ((active0 & 0xeabd8000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
            return 8;
         }
         return -1;
      case 5:
         if ((active0 & 0x1c8000000000L) != 0L)
            return 8;
         if ((active0 & 0xeaa10000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 5;
            return 8;
         }
         return -1;
      case 6:
         if ((active0 & 0x2a000000000000L) != 0L)
            return 8;
         if ((active0 & 0xc0a10000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 6;
            return 8;
         }
         return -1;
      case 7:
         if ((active0 & 0xc0a10000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 7;
            return 8;
         }
         return -1;
      case 8:
         if ((active0 & 0x10000000000L) != 0L)
            return 8;
         if ((active0 & 0xc0a00000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 8;
            return 8;
         }
         return -1;
      case 9:
         if ((active0 & 0x200000000000L) != 0L)
            return 8;
         if ((active0 & 0xc0800000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 9;
            return 8;
         }
         return -1;
      case 10:
         if ((active0 & 0x800000000000L) != 0L)
            return 8;
         if ((active0 & 0xc0000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 10;
            return 8;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStartNfaWithStates_0(0, 5, 62);
      case 33:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 40:
         return jjStopAtPos(0, 7);
      case 41:
         return jjStopAtPos(0, 8);
      case 42:
         return jjStopAtPos(0, 25);
      case 43:
         return jjStopAtPos(0, 27);
      case 44:
         return jjStopAtPos(0, 14);
      case 45:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x100000000000000L);
      case 46:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 47:
         return jjStopAtPos(0, 26);
      case 58:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 59:
         return jjStopAtPos(0, 13);
      case 60:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 61:
         return jjStopAtPos(0, 20);
      case 62:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 63:
         return jjStopAtPos(0, 23);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x14000000000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L);
      case 91:
         return jjStopAtPos(0, 11);
      case 93:
         return jjStopAtPos(0, 12);
      case 95:
         return jjStartNfaWithStates_0(0, 19, 8);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x820000000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x18000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x900040000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x20400000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 123:
         return jjStopAtPos(0, 9);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 125:
         return jjStopAtPos(0, 10);
      default :
         return jjMoveNfa_0(7, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         break;
      case 46:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      case 58:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         break;
      case 61:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      case 62:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         break;
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L);
      case 78:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 52, 8);
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L);
      case 83:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 50, 8);
         break;
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20800000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x9080c0000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x10020000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x600400000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L);
      case 124:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0xe2000000000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x420000000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x48000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x200020000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x90000000000L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 8);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 8);
         break;
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 100:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 8);
         break;
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 108:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 8);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x900000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x820000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x410000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 8);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 8);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x880000000000L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0xc0200000000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 8);
         break;
      case 104:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 8);
         break;
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 8);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 8);
         break;
      case 69:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 8);
         break;
      case 76:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 8);
         break;
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0xc0000000000000L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0xc0000000000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 87:
         return jjMoveStringLiteralDfa9_0(active0, 0xc0000000000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0xc0000000000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L);
      case 115:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 45, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa11_0(active0, 0xc0000000000000L);
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 47, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 54, 8);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 55, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 61;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 62:
                  if (curChar == 37)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 10)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 22);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(15, 20);
                  else if (curChar == 37)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 10)
                     jjCheckNAddTwoStates(0, 1);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAddStates(23, 26);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAddStates(27, 32);
                  }
                  break;
               case 0:
                  if (curChar == 10)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 37)
                     jjCheckNAddStates(6, 8);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 3:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(4);
                  break;
               case 4:
               case 5:
                  if (curChar != 10)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(4);
                  break;
               case 6:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 9:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddStates(23, 26);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(15, 20);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddStates(3, 5);
                  break;
               case 17:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(18, 19);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAddStates(0, 2);
                  break;
               case 22:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 22);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 28:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 19);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 32:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(33, 19);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 46)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddStates(36, 38);
                  break;
               case 38:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(39, 19);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (curChar == 46)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAddStates(39, 41);
                  break;
               case 44:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAddTwoStates(45, 24);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAddTwoStates(49, 24);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 44);
                  break;
               case 52:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 24);
                  break;
               case 54:
                  if (curChar != 48)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddStates(27, 32);
                  break;
               case 55:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(55, 11);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(57, 11);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(59, 13);
                  break;
               case 60:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(60, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
               case 8:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(8);
                  break;
               case 2:
                  jjAddStates(6, 8);
                  break;
               case 11:
                  if ((0x100000001000L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 13:
                  if ((0x100000001000L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 19:
                  if ((0x5000000050L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 21:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(47, 48);
                  break;
               case 24:
                  if ((0x5000000050L & l) != 0L && kind > 65)
                     kind = 65;
                  break;
               case 27:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               case 31:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 37:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 47:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(57, 58);
                  break;
               case 51:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               case 56:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(57, 11);
                  break;
               case 58:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(59);
                  break;
               case 59:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(59, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
               case 8:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(8);
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(6, 8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 61 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   20, 21, 24, 15, 16, 19, 2, 3, 6, 26, 27, 19, 30, 31, 34, 35, 
   40, 41, 46, 47, 50, 51, 24, 10, 11, 12, 13, 55, 11, 56, 58, 60, 
   13, 26, 27, 19, 36, 37, 19, 42, 43, 24, 50, 51, 24, 17, 18, 22, 
   23, 28, 29, 32, 33, 38, 39, 44, 45, 48, 49, 52, 53, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\50", "\51", "\173", "\175", "\133", 
"\135", "\73", "\54", "\56", "\72", "\72\72", "\56\56", "\137", "\75", "\74", "\76", 
"\77", "\41", "\52", "\57", "\53", "\55", "\146\151\162\163\164", "\162\145\141\144", 
"\147\145\164", "\46\46", "\174\174", "\164\162\165\145", "\146\141\154\163\145", "\74\75", 
"\76\75", "\41\75", "\154\145\156\147\164\150", "\154\151\163\164\137\143\157\156\163", 
"\164\141\151\154", "\143\157\156\143\141\164", "\151\156\163\145\162\164", 
"\162\145\155\157\166\145", "\141\162\162\141\171\137\143\157\156\163", "\167\162\151\164\145", 
"\162\145\143\157\162\144\137\143\157\156\163", "\160\165\164", "\115\105\101\123\125\122\105", "\111\123", 
"\106\117\122\137\101\114\114", "\111\116", "\105\116\101\102\114\105\104", 
"\123\124\101\124\105\137\122\105\127\101\122\104", "\124\122\101\116\123\137\122\105\127\101\122\104", "\55\76", null, null, null, 
null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x33ffffffffffff81L, 0x2L, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[61];
private final int[] jjstateSet = new int[122];
protected char curChar;
/** Constructor. */
public RewParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public RewParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 61; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
