[comment encoding = UTF-8 /]
[**
 * The documentation of the module generaterew.
 */]
[module generaterew('http://mmaemilia.ecore')]


[**
 * The documentation of the template generaterew.
 * @param anAEmiliaSpecification
 */]
[template public generaterew(anAEmiliaSpecification : AEmiliaSpecification) post(trim())]
[comment @main/]
[file (anAEmiliaSpecification.archiTypeDecl.atName.concat('_result.rew'), false, 'UTF-8')]

		[let list_elem: OrderedSet(ArchiElemInstance) = self.archiTypeDecl.atDeclaration.aeiDecl]
		[if (not(self.archiTypeDecl.atDeclaration.aeiDecl->oclIsUndefined()))]
		[let last_elem: ArchiElemInstance = self.archiTypeDecl.atDeclaration.aeiDecl->last()]
		[comment NOTA: Probabilmente necessito anche qui di una condizione di controllo prima di entrare nel for al fine di controllare quali istanze prendere in considerazione/]
		[comment Ciclo su tutte le "Architectural Element Instances"/]
		[for (elem: ArchiElemInstance | self.archiTypeDecl.atDeclaration.aeiDecl) separator('\n')]
	    [comment Inserire qui la condizione desiderata (quantomeno l'indice da misurare al fine di verificare se sull'elemento corrente è possibile fare questa misurazione)/]
		[if (1=1)]
		[if (elem = last_elem)]
		[if (elem.selector->isEmpty())]
		[if (not(elem.TypeOf.oiDecl->isEmpty()))]
		[comment Istanze singole - Azioni singole/]
		[let last_interaction: OutputInteraction = elem.TypeOf.oiDecl->last()]
		[for (interaction: OutputInteraction | elem.TypeOf.oiDecl) separator('\n')]
		[if (interaction = last_interaction and elem.TypeOf.oiDecl->size() > 1)]
		MEASURE [elem.TypeOf.etName/]_Single_throughtput_[elem.instanceName/]_[interaction.intName/] IS ENABLED ([elem.instanceName/].[interaction.intName/]) ->TRANS_REWARD(1.0);
		MEASURE [elem.TypeOf.etName/]_Single_utilization_[elem.instanceName/]_[interaction.intName/] IS ENABLED ([elem.instanceName/].[interaction.intName/]) ->STATE_REWARD(1.0);	
		[comment Aggiungere anche TRANS_REWARD per utilization e STATE_REWARD per throughtput?? --> Non ha molto senso!!/]
		[elseif (interaction = last_interaction and not(elem.TypeOf.oiDecl->size() > 1))]
		MEASURE [elem.TypeOf.etName/]_Single_throughtput_[elem.instanceName/]_[interaction.intName/] IS ENABLED ([elem.instanceName/].[interaction.intName/]) ->TRANS_REWARD(1.0);
		MEASURE [elem.TypeOf.etName/]_Single_utilization_[elem.instanceName/]_[interaction.intName/] IS ENABLED ([elem.instanceName/].[interaction.intName/]) ->STATE_REWARD(1.0)
		[else]
		MEASURE [elem.TypeOf.etName/]_Single_throughtput_[elem.instanceName/]_[interaction.intName/] IS ENABLED ([elem.instanceName/].[interaction.intName/]) ->TRANS_REWARD(1.0);
		MEASURE [elem.TypeOf.etName/]_Single_utilization_[elem.instanceName/]_[interaction.intName/] IS ENABLED ([elem.instanceName/].[interaction.intName/]) ->STATE_REWARD(1.0);
		[/if]
		[/for]
		[/let]
		[comment Istanze singole - Azioni multiple (throughtput e utilization)/]
		[if (not(elem.TypeOf.oiDecl->isEmpty()) and elem.TypeOf.oiDecl->size() > 1)]
		[for (interaction: OutputInteraction | elem.TypeOf.oiDecl)]
		[if (interaction = elem.TypeOf.oiDecl->first())]
		MEASURE [elem.TypeOf.etName/]_Multiple_throughtput_[elem.instanceName/] IS 
				ENABLED ([elem.instanceName/].[interaction.intName/]) ->TRANS_REWARD(1.0)
		[elseif (interaction = elem.TypeOf.oiDecl->last())]
				ENABLED ([elem.instanceName/].[interaction.intName/]) ->TRANS_REWARD(1.0);
		[else]
				ENABLED ([elem.instanceName/].[interaction.intName/]) ->TRANS_REWARD(1.0)
		[/if]
		[/for]
		[for (interaction: OutputInteraction | elem.TypeOf.oiDecl)]
		[if (interaction = elem.TypeOf.oiDecl->first())]
		MEASURE [elem.TypeOf.etName/]_Multiple_utilization_[elem.instanceName/] IS 
				ENABLED ([elem.instanceName/].[interaction.intName/]) ->STATE_REWARD(1.0)
		[elseif (interaction = elem.TypeOf.oiDecl->last())]
				ENABLED ([elem.instanceName/].[interaction.intName/]) ->STATE_REWARD(1.0)
		[else]
				ENABLED ([elem.instanceName/].[interaction.intName/]) ->STATE_REWARD(1.0)
		[/if]
		[/for]
		[/if]
		[/if]
		[else]
		[if (not(elem.TypeOf.oiDecl->isEmpty()) and elem.TypeOf.oiDecl->size() > 1)]
		[for (interaction: OutputInteraction | elem.TypeOf.oiDecl) separator('\n')]
		[comment Istanze multiple (da gestire successivamente)/]
		[if (check_condition_type(elem.selector) = '1')]
		[if (interaction = elem.TypeOf.oiDecl->first())]
		MEASURE [elem.TypeOf.etName/]_Multiple_utilization_[elem.instanceName/] IS
				ENABLED ([elem.instanceName/][ '[' /][check_condition_type(elem.selector)/][ ']' /].[interaction.intName/]) ->STATE_REWARD(1.0)
				[check_similar_objects_utilization(elem, list_elem, interaction)/]
		[/if]
		[/if]
		[/for]

		[for (interaction: OutputInteraction | elem.TypeOf.oiDecl) separator('\n')]
		[comment Istanze multiple (da gestire successivamente)/]
		[if (check_condition_type(elem.selector) = '1')]
		[if (interaction = elem.TypeOf.oiDecl->first())]
		MEASURE [elem.TypeOf.etName/]_Multiple_throughtput_[elem.instanceName/] IS
				ENABLED ([elem.instanceName/][ '[' /][check_condition_type(elem.selector)/][ ']' /].[interaction.intName/]) ->TRANS_REWARD(1.0)
				[check_similar_objects_throughtput(elem, list_elem, interaction)/]
		[/if]
		[/if]
		[/for]
		[/if]
		[/if]
		[else]
		[if (elem.selector->isEmpty())]
		[if (not(elem.TypeOf.oiDecl->isEmpty()))]
		[for (interaction: OutputInteraction | elem.TypeOf.oiDecl) separator('\n')]
		MEASURE [elem.TypeOf.etName/]_Single_throughtput_[elem.instanceName/]_[interaction.intName/] IS ENABLED ([elem.instanceName/].[interaction.intName/]) ->TRANS_REWARD(1.0);
		MEASURE [elem.TypeOf.etName/]_Single_utilization_[elem.instanceName/]_[interaction.intName/] IS ENABLED ([elem.instanceName/].[interaction.intName/]) ->STATE_REWARD(1.0);
		[comment Aggiungere anche TRANS_REWARD per utilization e STATE_REWARD per throughtput?? --> Non ha molto senso!!/]
		[/for]
		[comment Istanze singole - Azioni multiple (throughtput e utilization)/]
		[if (not(elem.TypeOf.oiDecl->isEmpty()) and elem.TypeOf.oiDecl->size() > 1)]
		[for (interaction: OutputInteraction | elem.TypeOf.oiDecl)]
		[if (interaction = elem.TypeOf.oiDecl->first())]
		MEASURE [elem.TypeOf.etName/]_Multiple_throughtput_[elem.instanceName/] IS 
				ENABLED ([elem.instanceName/].[interaction.intName/]) ->TRANS_REWARD(1.0)
		[elseif (interaction = elem.TypeOf.oiDecl->last())]
				ENABLED ([elem.instanceName/].[interaction.intName/]) ->TRANS_REWARD(1.0);
		[else]
				ENABLED ([elem.instanceName/].[interaction.intName/]) ->TRANS_REWARD(1.0)
		[/if]
		[/for]
		[for (interaction: OutputInteraction | elem.TypeOf.oiDecl)]
		[if (interaction = elem.TypeOf.oiDecl->first())]
		MEASURE [elem.TypeOf.etName/]_Multiple_utilization_[elem.instanceName/] IS 
				ENABLED ([elem.instanceName/].[interaction.intName/]) ->STATE_REWARD(1.0)
		[elseif (interaction = elem.TypeOf.oiDecl->last())]
				ENABLED ([elem.instanceName/].[interaction.intName/]) ->STATE_REWARD(1.0);
		[else]
				ENABLED ([elem.instanceName/].[interaction.intName/]) ->STATE_REWARD(1.0)
		[/if]
		[/for]
		[/if]
		[/if]
		[else]
		[comment Selettore non vuoto, dunque ci sono diverse istanze di un certo tipo/]
		[if (not(elem.TypeOf.oiDecl->isEmpty()))]
		[for (interaction: OutputInteraction | elem.TypeOf.oiDecl) separator('\n')]
		[comment Istanze multiple (da gestire successivamente)/]
		[if (check_condition_type(elem.selector) = '1')]
		[if (interaction = elem.TypeOf.oiDecl->first())]
		MEASURE [elem.TypeOf.etName/]_Multiple_utilization_[elem.instanceName/] IS
				ENABLED ([elem.instanceName/][ '[' /][check_condition_type(elem.selector)/][ ']' /].[interaction.intName/]) ->STATE_REWARD(1.0)
				[check_similar_objects_utilization(elem, list_elem, interaction)/]
		[/if]
		[/if]
		[/for]

		[for (interaction: OutputInteraction | elem.TypeOf.oiDecl) separator('\n')]
		[comment Istanze multiple (da gestire successivamente)/]
		[if (check_condition_type(elem.selector) = '1')]
		[if (interaction = elem.TypeOf.oiDecl->first())]
		MEASURE [elem.TypeOf.etName/]_Multiple_throughtput_[elem.instanceName/] IS
				ENABLED ([elem.instanceName/][ '[' /][check_condition_type(elem.selector)/][ ']' /].[interaction.intName/]) ->TRANS_REWARD(1.0)
				[check_similar_objects_throughtput(elem, list_elem, interaction)/]
		[/if]
		[/if]
		[/for]
		[/if]
		[/if]
		[/if]
		[/if]
		[/for]
		[/let]
		[/if]
		[/let]			
		
[/file]
[/template]



[template public check_similar_objects_utilization(e : ArchiElemInstance, list_elem : OrderedSet(ArchiElemInstance), current_interaction : OutputInteraction) post(trim())]
[for (elem: ArchiElemInstance | list_elem->select(elements: ArchiElemInstance | elements.TypeOf.etName = e.TypeOf.etName))]
[if (elem.selector->notEmpty() and elem<>e)]
[if (elem = list_elem->select(elements: ArchiElemInstance | elements.TypeOf.etName = e.TypeOf.etName)->last())]	
ENABLED ([elem.instanceName/][ '[' /][check_condition_type(elem.selector)/][ ']' /].[current_interaction.intName/]) ->STATE_REWARD(1.0);
[else]
ENABLED ([elem.instanceName/][ '[' /][check_condition_type(elem.selector)/][ ']' /].[current_interaction.intName/]) ->STATE_REWARD(1.0)
[/if]
[/if]
[/for]
[/template]


[template public check_similar_objects_throughtput(e : ArchiElemInstance, list_elem : OrderedSet(ArchiElemInstance), current_interaction : OutputInteraction) post(trim())]
[for (elem: ArchiElemInstance | list_elem->select(elements: ArchiElemInstance | elements.TypeOf.etName = e.TypeOf.etName))]
[if (elem.selector->notEmpty() and elem<>e)]
[if (elem = list_elem->select(elements: ArchiElemInstance | elements.TypeOf.etName = e.TypeOf.etName)->last())]	
ENABLED ([elem.instanceName/][ '[' /][check_condition_type(elem.selector)/][ ']' /].[current_interaction.intName/]) ->TRANS_REWARD(1.0);
[else]
ENABLED ([elem.instanceName/][ '[' /][check_condition_type(elem.selector)/][ ']' /].[current_interaction.intName/]) ->TRANS_REWARD(1.0)
[/if]
[/if]
[/for]
[/template]

[template public check_condition_type(e : OclAny) post(trim())]
[if e.oclIsTypeOf(RelationalExpr)]
[check_condition_type(e.oclAsType(RelationalExpr).leftExprRel).trim()/] [e.oclAsType(RelationalExpr).operator/] [check_condition_type(e.oclAsType(RelationalExpr).rightExprRel).trim()/]
[elseif e.oclIsTypeOf(ArithExpr)]
[check_condition_type(e.oclAsType(ArithExpr).leftExprArith).trim()/] [e.oclAsType(ArithExpr).operator/] [check_condition_type(e.oclAsType(ArithExpr).rightExprArith).trim()/]
[elseif e.oclIsTypeOf(BooleanExpr)]
[check_condition_type(e.oclAsType(BooleanExpr).leftExprBool).trim()/] [e.oclAsType(BooleanExpr).operator/] [check_condition_type(e.oclAsType(BooleanExpr).rightExprBool).trim()/]
[elseif e.oclIsTypeOf(IdentExpr)]
[e.oclAsType(IdentExpr).name/]
[elseif e.oclIsTypeOf(MathFunctions)]
[if (e.oclAsType(MathFunctions).rightExprMath->isEmpty())]
[e.oclAsType(MathFunctions).name/]([check_condition_type(e.oclAsType(MathFunctions).leftExprMath)/]) 
[else]
[e.oclAsType(MathFunctions).name/]([check_condition_type(e.oclAsType(MathFunctions).leftExprMath)/], [check_condition_type(e.oclAsType(MathFunctions).rightExprMath)/])
[/if]
[elseif e.oclIsTypeOf(Pseudo_random_num_gen)]
[if (e.oclAsType(Pseudo_random_num_gen).secondNumGenOp->isEmpty())]
[e.oclAsType(Pseudo_random_num_gen).name/]([check_condition_type(e.oclAsType(Pseudo_random_num_gen).firstNumGenOp)/])
[elseif (e.oclAsType(Pseudo_random_num_gen).thirdNumGenOp->isEmpty())]
[e.oclAsType(Pseudo_random_num_gen).name/]([check_condition_type(e.oclAsType(Pseudo_random_num_gen).firstNumGenOp)/],[check_condition_type(e.oclAsType(Pseudo_random_num_gen).secondNumGenOp)/])
[elseif (e.oclAsType(Pseudo_random_num_gen).firstNumGenOp->notEmpty() and e.oclAsType(Pseudo_random_num_gen).secondNumGenOp->notEmpty() and e.oclAsType(Pseudo_random_num_gen).thirdNumGenOp->notEmpty())]
[e.oclAsType(Pseudo_random_num_gen).name/]([check_condition_type(e.oclAsType(Pseudo_random_num_gen).firstNumGenOp)/],[check_condition_type(e.oclAsType(Pseudo_random_num_gen).secondNumGenOp)/],[check_condition_type(e.oclAsType(Pseudo_random_num_gen).thirdNumGenOp)/])
[elseif (e.oclAsType(Pseudo_random_num_gen).secondNumGenOp->isEmpty() and e.oclAsType(Pseudo_random_num_gen).thirdNumGenOp->isEmpty())]
[e.oclAsType(Pseudo_random_num_gen).name/]([check_condition_type(e.oclAsType(Pseudo_random_num_gen).firstNumGenOp)/])
[/if]
[elseif e.oclIsTypeOf(ListExpr)]
[e.oclAsType(ListExpr).operation/]([let last_operand : Expression = e.oclAsType(ListExpr).list_operands->last()][for (elem : Expression | e.oclAsType(ListExpr).list_operands)][if (elem = last_operand)][check_condition_type(elem)/][else][check_condition_type(elem)/],[/if][/for][/let])
[elseif e.oclIsTypeOf(RecordExpr)]
[e.oclAsType(RecordExpr).operation/]([let last_operand : Expression = e.oclAsType(RecordExpr).record_operands->last()][for (elem : Expression | e.oclAsType(RecordExpr).record_operands)][if (elem = last_operand)][check_condition_type(elem)/][else][check_condition_type(elem)/],[/if][/for][/let])
[elseif e.oclIsTypeOf(ArrayExpr)]
[e.oclAsType(ArrayExpr).operation/]([let last_operand : Expression = e.oclAsType(ArrayExpr).array_operands->last()][for (elem : Expression | e.oclAsType(ArrayExpr).array_operands)][if (elem = last_operand)][check_condition_type(elem)/][else][check_condition_type(elem)/],[/if][/for][/let]) 
[comment Testare : List/Array/Record Expr /] 
[else]
in gestione
[/if]
[/template]
